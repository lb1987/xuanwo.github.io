<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Xuanwo's Blog]]></title>
  <subtitle><![CDATA[A Long Way to Go]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://xuanwo.org/"/>
  <updated>2015-04-03T07:22:24.000Z</updated>
  <id>http://xuanwo.org/</id>
  
  <author>
    <name><![CDATA[Xuanwo]]></name>
    <email><![CDATA[vars.cn@gmail.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[史上最详细的Hexo博客搭建图文教程]]></title>
    <link href="http://xuanwo.org/2015/03/26/hexo-intor/"/>
    <id>http://xuanwo.org/2015/03/26/hexo-intor/</id>
    <published>2015-03-26T00:22:43.000Z</published>
    <updated>2015-04-03T07:22:24.000Z</updated>
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>从2014年的八月份开始接触Hexo，一直用到现在，已经有半年的时间了。这期间，Hexo从2.X一路升级到了3.0，很多地方都发生了改变。不仅如此，很多原来使用Hexo的博主们写下了的教程并没有及时更新，导致后来人一头雾水，挫折感十足。因此，本文致力于提供一份足够简单，长期维护的基于Github Pages的Hexo博客搭建图文教程，希望能有所帮助。<br>当然，我个人的力量是有限的，因此也希望使用Hexo的大家也能一起行动起来，通过<a href="https://github.com/Xuanwo/xuanwo.github.io/pulls" target="_blank" rel="external">提交PR</a>，<a href="https://github.com/Xuanwo/xuanwo.github.io/issues" target="_blank" rel="external">发布issues</a>或者在下方评论区评论等形式参与到本文档的编辑中来。浏览时，使用<code>Ctrl+F</code>搜索关键词。<em>（是不是会有似曾相识的感觉，= =）</em></p>
<a id="more"></a>
<h1 id="准备">准备</h1><p>你需要准备好以下软件：</p>
<ul>
<li>Node.js环境</li>
<li>Git</li>
</ul>
<h2 id="Windows">Windows</h2><h3 id="配置Node-js环境">配置Node.js环境</h3><p>下载Node.js安装文件：</p>
<ul>
<li><a href="http://nodejs.org/dist/v0.12.1/node-v0.12.1-x86.msi" target="_blank" rel="external">Windows Installer 32-bit</a></li>
<li><a href="http://nodejs.org/dist/v0.12.1/x64/node-v0.12.1-x64.msi" target="_blank" rel="external">Windows Installer 64-bit</a><br>根据自己的Windows版本选择相应的安装文件，要是不知道，就安装32-bit的吧- -。<br>如图所示：<br><img src="http://xuanwo.qiniudn.com/opinion/Nodejs-install.png" alt="Node.js安装界面"><br>保持默认设置即可，一路Next，安装很快就结束了。<br>然后我们检查一下是不是要求的组件都安装好了，同时按下<code>Win</code>和<code>R</code>，打开运行窗口：<br><img src="http://xuanwo.qiniudn.com/opinion/win-run.png" alt="Windows的运行界面"><br>在新打开的窗口中输入<code>cmd</code>，敲击回车，打开命令行界面。<em>（下文将直接用<code>打开命令行</code>来表示以上操作，记住哦~）</em><br>在打开的命令行界面中，输入<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line"><span class="built_in">npm</span> -v</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>如果结果如下图所示，则说明安装正确，可以进行下一步了，如果不正确，则需要回头检查自己的安装过程。<br><img src="http://xuanwo.qiniudn.com/opinion/Nodejs-test.png" alt="Node.js安装测试"></p>
<h3 id="配置Git环境">配置Git环境</h3><p>下载Git安装文件：</p>
<ul>
<li><a href="https://github.com/msysgit/msysgit/releases/download/Git-1.9.5-preview20150319/Git-1.9.5-preview20150319.exe" target="_blank" rel="external">Git-1.9.5-preview20150319.exe</a><br>然后就进入了Git的安装界面，如图：<br><img src="http://xuanwo.qiniudn.com/opinion/Git-install.png" alt="Git安装界面"><br>和Node.js一样，大部分设置都只需要保持默认，但是出于我们操作方便考虑，建议PATH选项按照下图选择：<br><img src="http://xuanwo.qiniudn.com/opinion/Git-path-setting.png" alt="Git PATH设置"><blockquote>
<p>这是对上图的解释，不需要了解请直接跳过<br>Git的默认设置下，出于安全考虑，只有在Git Bash中才能进行Git的相关操作。按照上图进行的选择，将会使得Git安装程序在系统PATH中加入Git的相关路径，使得你可以在CMD界面下调用Git，不用打开Git Bash了。</p>
</blockquote>
</li>
</ul>
<p>一样的，我们来检查一下Git是不是安装正确了，打开命令行，输入：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="comment">--version</span></span><br></pre></td></tr></table></figure></p>
<p>如果结果如下图所示，则说明安装正确，可以进行下一步了，如果不正确，则需要回头检查自己的安装过程。<br><img src="http://xuanwo.qiniudn.com/opinion/Git-test.png" alt="Git安装测试"></p>
<h2 id="Linux">Linux</h2><h2 id="Mac_OS">Mac OS</h2><h1 id="配置Github">配置Github</h1><h2 id="注册账号">注册账号</h2><p><strong>如果已经拥有账号，请跳过此步~</strong><br>打开<a href="https://github.com/" target="_blank" rel="external">https://github.com/</a>，在下图的框中，分别输入自己的用户名，邮箱，密码。<br><img src="http://xuanwo.qiniudn.com/opinion/Github-sign-up.png" alt="Github注册"><br>然后前往自己刚才填写的邮箱，点开Github发送给你的注册确认信，确认注册，结束注册流程。<br><strong>一定要确认注册，否则无法使用gh-pages！</strong></p>
<h2 id="创建代码库">创建代码库</h2><p>登陆之后，点击页面右上角的加号，选择<code>New repository</code>：<br><img src="http://xuanwo.qiniudn.com/opinion/Github-create-a-new-repo.png" alt="新建代码库"><br>进入代码库创建页面：<br>在<code>Repository name</code>下填写<code>yourname.github.io</code>，<code>Description (optional)</code>下填写一些简单的描述（不写也没有关系），如图所示：<br><img src="http://xuanwo.qiniudn.com/opinion/Github-new-repo-setting.png" alt="代码库设置"><br>正确创建之后，你将会看到如下界面：<br><img src="http://xuanwo.qiniudn.com/opinion/Github-new-repo-look-like.png" alt="新代码库的界面"></p>
<h2 id="开启gh-pages功能">开启gh-pages功能</h2><p>点击界面右侧的<code>Settings</code>，你将会打开这个库的setting页面，向下拖动，直到看见<code>GitHub Pages</code>，如图：<br><img src="http://xuanwo.qiniudn.com/opinion/Github-pages.png" alt="Github pages"><br>点击<code>Automatic page generator</code>，Github将会自动替你创建出一个gh-pages的页面。<br>如果你的配置没有问题，那么大约15分钟之后，<code>yourname.github.io</code>这个网址就可以正常访问了~<br>如果<code>yourname.github.io</code>已经可以正常访问了，那么Github一侧的配置已经全部结束了。</p>
<h1 id="配置Hexo">配置Hexo</h1><h2 id="安装Hexo">安装Hexo</h2><p>在自己认为合适的地方创建一个文件夹，然后在文件夹空白处按住<code>Shift</code>+鼠标右键，然后点击在此处打开命令行窗口。<em>（同样要记住啦，下文中会使用<code>在当前目录打开命令行</code>来代指上述的操作）</em><br>在命令行中输入：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-<span class="keyword">cli</span> -<span class="keyword">g</span></span><br></pre></td></tr></table></figure></p>
<p>然后你将会看到:<br><img src="http://xuanwo.qiniudn.com/opinion/npm-install-hexo-cli.png" alt="安装hexo-cli"><br>可能你会看到一个<code>WARN</code>，但是不用担心，这不会影响你的正常使用。<br>然后输入<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="operator"><span class="keyword">install</span> hexo <span class="comment">--save</span></span></span><br></pre></td></tr></table></figure></p>
<p>然后你会看到命令行窗口刷了一大堆白字，下面我们来看一看Hexo是不是已经安装好了。<br>在命令行中输入：<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">hexo</span> -v</span><br></pre></td></tr></table></figure></p>
<p>如果你看到了如图文字，则说明已经安装成功了。<br><img src="http://xuanwo.qiniudn.com/opinion/hexo-v.png" alt="Hexo测试"></p>
<h2 id="初始化Hexo">初始化Hexo</h2><p>接着上面的操作，输入：<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">hexo</span> init</span><br></pre></td></tr></table></figure></p>
<p>如图：<br><img src="http://xuanwo.qiniudn.com/opinion/hexo-init.png" alt="hexo初始化"><br>然后输入：<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span></span><br></pre></td></tr></table></figure></p>
<p>之后npm将会自动安装你需要的组件，只需要等待npm操作即可。</p>
<h2 id="首次体验Hexo">首次体验Hexo</h2><p>继续操作，同样是在命令行中，输入：<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">hexo</span> g</span><br></pre></td></tr></table></figure></p>
<p>如图：<br><img src="http://xuanwo.qiniudn.com/opinion/hexo-g.png" alt="hexo渲染"><br>然后输入：<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">hexo</span> s</span><br></pre></td></tr></table></figure></p>
<p>然后会提示：<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO  Hexo is running <span class="keyword">at</span> <span class="keyword">http</span>://<span class="number">0.0</span>.0.0:<span class="number">4000</span>/. Press Ctrl+C <span class="built_in">to</span> <span class="built_in">stop</span>.</span><br></pre></td></tr></table></figure></p>
<p>在浏览器中打开<code>http://localhost:4000/</code>，你将会看到：<br><img src="http://xuanwo.qiniudn.com/opinion/hexo-first-time.png" alt="hexo初体验"><br>到目前为止，Hexo在本地的配置已经全都结束了。</p>
<h1 id="使用Hexo">使用Hexo</h1><h2 id="修改全局配置文件">修改全局配置文件</h2><p>在你的目录下，将会存在一个名为<code>_config.yml</code>的文件，这个文件保存了Hexo全局的配置，下面先修改其中的一部分：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># Hexo Configuration</span><br><span class="line">## <span class="string">Docs:</span> <span class="string">http:</span><span class="comment">//hexo.io/docs/configuration.html</span></span><br><span class="line">## <span class="string">Source:</span> <span class="string">https:</span><span class="comment">//github.com/hexojs/hexo/</span></span><br><span class="line"></span><br><span class="line"># Site</span><br><span class="line"><span class="string">title:</span> Hexo   <span class="comment">//站点标题</span></span><br><span class="line"><span class="string">subtitle:</span>	<span class="comment">//站点副标题</span></span><br><span class="line"><span class="string">description:</span>	<span class="comment">//站点描述，会被搜索引擎识别</span></span><br><span class="line"><span class="string">author:</span> John Doe   	<span class="comment">//站点作者</span></span><br><span class="line"><span class="string">language:</span>	<span class="comment">//站点语言，一般不用设置</span></span><br><span class="line"><span class="string">timezone:</span>   <span class="comment">//时区，一般不用设置</span></span><br><span class="line"></span><br><span class="line"># URL</span><br><span class="line">## If your site is put <span class="keyword">in</span> a subdirectory, set url <span class="keyword">as</span> <span class="string">'http://yoursite.com/child'</span> and root <span class="keyword">as</span> <span class="string">'/child/'</span></span><br><span class="line"><span class="string">url:</span> <span class="string">http:</span><span class="comment">//yoursite.com   //请设置为http://yourname.github.io</span></span><br><span class="line"><span class="string">root:</span> <span class="regexp">/   /</span>/保持默认，无需设置</span><br><span class="line"><span class="string">permalink:</span> :year<span class="regexp">/:month/</span>:day<span class="regexp">/:title/</span>  <span class="comment">//你文章的链接将会表现为：http://yourname.github.io/年/月/日/标题/</span></span><br><span class="line"><span class="string">permalink_defaults:</span>  <span class="comment">//保持默认，无需设置</span></span><br></pre></td></tr></table></figure></p>
<h2 id="配置Deployment">配置Deployment</h2><p>首先，你需要为自己配置身份信息，打开命令行，然后输入：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="comment">--global user.name</span></span><br></pre></td></tr></table></figure></p>
<p>同样在<code>_config.yml</code>文件中，找到<code>Deployment</code>，然后按照如下修改：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">deploy</span>:</span><br><span class="line">  <span class="attribute">type</span>: git</span><br><span class="line">  <span class="attribute">repo</span>: git<span class="variable">@github</span>.<span class="attribute">com</span>:yourname/yourname.github.io.git</span><br><span class="line">  <span class="attribute">branch</span>: master</span><br></pre></td></tr></table></figure></p>
<p>然后在当前目录打开命令行，输入：<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">hexo</span> d</span><br></pre></td></tr></table></figure></p>
<p>随后按照提示，分别输入自己的Github账号用户名和密码，开始上传。<br>然后通过<a href="http://yourname.github.io/来访问自己刚刚上传的网站。" target="_blank" rel="external">http://yourname.github.io/来访问自己刚刚上传的网站。</a></p>
<h2 id="添加新文章">添加新文章</h2><p>打开Hexo目录下的<code>source</code>文件夹，所有的文章都会以md形式保存在<code>_post</code>文件夹中，只要在<code>_post</code>文件夹中新建md类型的文档，就能在执行<code>hexo g</code>的时候被渲染。<br>新建的文章头需要添加一些yml信息，如下所示：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">title:</span> hello-world   <span class="comment">//在此处添加你的标题。</span></span><br><span class="line"><span class="string">date:</span> <span class="number">2014</span>-<span class="number">11</span>-<span class="number">7</span> <span class="number">08</span>:<span class="number">55</span>:<span class="number">29</span>   <span class="comment">//在此处输入你编辑这篇文章的时间。</span></span><br><span class="line"><span class="string">tags:</span> [ACM, UVa, C<span class="regexp">/C++]  /</span>/在此处添加这篇文章的标签，多个标签需要使用`[ ]`来包裹，用`,`来分隔。</span><br><span class="line"><span class="string">categories:</span> Exercise   <span class="comment">//在此处输入这篇文章的分类。</span></span><br><span class="line"><span class="string">toc:</span> <span class="literal">true</span>  <span class="comment">//在此处设定是否开启目录，需要主题支持。</span></span><br><span class="line">---</span><br></pre></td></tr></table></figure></p>
<h1 id="进阶">进阶</h1><p>如果成功完成了上述的全部步骤，恭喜你，你已经搭建了一个最为简单且基础的博客。但是这个博客还非常简单， 没有个人的定制，操作也比较复杂，下面的进阶技巧将会让你获得对Hexo更为深入的了解。</p>
<h2 id="更换主题">更换主题</h2><p><em>可以在<a href="https://github.com/hexojs/hexo/wiki/Themes" target="_blank" rel="external">此处</a>寻找自己喜欢的主题</em><br>下载所有的主题文件，保存到Hexo目录下的<code>themes</code>文件夹下。然后在<code>_config.yml</code>文件中修改：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## <span class="string">Plugins:</span> <span class="string">http:</span><span class="comment">//hexo.io/plugins/</span></span><br><span class="line">## <span class="string">Themes:</span> <span class="string">http:</span><span class="comment">//hexo.io/themes/</span></span><br><span class="line"><span class="string">theme:</span> landscape <span class="comment">//themes文件夹中对应文件夹的名称</span></span><br></pre></td></tr></table></figure></p>
<p>然后先执行<code>hexo clean</code>，然后重新<code>hexo g</code>，并且<code>hexo d</code>，很快就能看到新主题的效果了~</p>
<h2 id="更换域名">更换域名</h2><p>首先，需要注册一个域名。在中国的话，<code>.cn</code>全都需要进行备案，如果不想备案的话，请注册别的顶级域名，可以使用<a href="https://www.godaddy.com/" target="_blank" rel="external">godaddy</a>或<a href="http://www.xinnet.com/" target="_blank" rel="external">新网</a>或<a href="http://www.xinnet.com/" target="_blank" rel="external">万网</a>中的任意一家，自己权衡价格即可。<br>然后，我们需要配置一下域名解析。推荐使用DNSPod的服务，比较稳定，解析速度比较快。在域名注册商出修改NS服务器地址为：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f1g1ns1<span class="class">.dnspod</span><span class="class">.net</span></span><br><span class="line">f1g1ns2<span class="class">.dnspod</span><span class="class">.net</span></span><br></pre></td></tr></table></figure></p>
<p>以新网为例，首先点击域名管理进入管理页面：<br><img src="http://xuanwo.qiniudn.com/opinion/domin-setting.png" alt="点击域名管理"><br>然后点击域名后面的<code>管理</code>：<br><img src="http://xuanwo.qiniudn.com/opinion/mydomin.png" alt="管理"><br>进入域名管理的操作界面，点击<code>域名管理</code>，来到域名管理界面：<br><img src="http://xuanwo.qiniudn.com/opinion/domin-config.png" alt="终于来到了域名管理= ="><br>点击<code>修改域名DNS</code>，然后选择<code>填写具体信息</code>，在下面的空框中填入DNSPod的NS服务器：<br><img src="http://xuanwo.qiniudn.com/opinion/domin-dnspod.png" alt="使用DNSPod的服务器"><br>然后我们进入DNSPod的界面，开始真正进入域名解析的配置= =。在DNSPod中，首先添加域名，然后分别添加如下条目：<br><img src="http://xuanwo.qiniudn.com/opinion/dnspod-setting.png" alt="配置DNS解析"><br>最后，我们对Github进行一下配置。<br>在自己本地的hexo目录下的<code>source</code>文件夹中，新建一个<code>CNAME</code>文件<em>（注意，没有后缀名。）</em>，内容为<code>yourdomin.xxx</code>。然后再执行一下<code>hexo d -g</code>，重新上传自己的博客。<br>在github中打开你自己的库，进入库的setting界面，如果看到了如下提示，说明配置成功了。<br><img src="http://xuanwo.qiniudn.com/opinion/Github-domin.png" alt="Github-pages绑定自定义域名"><br>在这一系列的操作中，包括修改NS服务器，设置A解析等等，都需要一定的时间。短则10分钟，长则24小时，最长不会超过72小时。如果超过72小时，请检查自己的配置过程，或者修改自己本地的DNS服务器。</p>
<h1 id="更新日志">更新日志</h1><ul>
<li>2015年03月26日 完成了基础架构，慢慢添加进阶技巧= =。</li>
<li>2015年03月31日 添加了CNAME的相关内容。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="前言">前言</h1><p>从2014年的八月份开始接触Hexo，一直用到现在，已经有半年的时间了。这期间，Hexo从2.X一路升级到了3.0，很多地方都发生了改变。不仅如此，很多原来使用Hexo的博主们写下了的教程并没有及时更新，导致后来人一头雾水，挫折感十足。因此，本文致力于提供一份足够简单，长期维护的基于Github Pages的Hexo博客搭建图文教程，希望能有所帮助。<br>当然，我个人的力量是有限的，因此也希望使用Hexo的大家也能一起行动起来，通过<a href="https://github.com/Xuanwo/xuanwo.github.io/pulls">提交PR</a>，<a href="https://github.com/Xuanwo/xuanwo.github.io/issues">发布issues</a>或者在下方评论区评论等形式参与到本文档的编辑中来。浏览时，使用<code>Ctrl+F</code>搜索关键词。<em>（是不是会有似曾相识的感觉，= =）</em></p>]]>
    
    </summary>
    
      <category term="Blog" scheme="http://xuanwo.org/tags/Blog/"/>
    
      <category term="Github-Pages" scheme="http://xuanwo.org/tags/Github-Pages/"/>
    
      <category term="Hexo" scheme="http://xuanwo.org/tags/Hexo/"/>
    
      <category term="Software" scheme="http://xuanwo.org/tags/Software/"/>
    
      <category term="Opinion" scheme="http://xuanwo.org/categories/Opinion/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[数论——快速幂]]></title>
    <link href="http://xuanwo.org/2015/03/18/number-theory-quick-pow/"/>
    <id>http://xuanwo.org/2015/03/18/number-theory-quick-pow/</id>
    <published>2015-03-18T17:43:59.000Z</published>
    <updated>2015-04-03T07:22:24.000Z</updated>
    <content type="html"><![CDATA[<h1 id="原始代码">原始代码</h1><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Pow</span><span class="params">(<span class="keyword">int</span> A, <span class="keyword">int</span> n)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> rslt = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        rslt *= A;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> rslt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>很简单的算法，复杂度为O(n)，但是当n特别大的时候，可能会出现以下两个问题：</p>
<ul>
<li>爆int，我们无法使用int来存储我们最后的结果。</li>
<li>计算量上升极快，即使是O(n)的复杂度也无法满足我们的需要。</li>
</ul>
<h1 id="二分优化">二分优化</h1><p>快速幂的思想非常简单，就是二分法：<br><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">对于一般的解法：</span><br><span class="line"><span class="literal">A</span>^<span class="number">8</span> = <span class="literal">A</span> * <span class="literal">A</span> * <span class="literal">A</span> * <span class="literal">A</span> * <span class="literal">A</span> * <span class="literal">A</span> * <span class="literal">A</span> * <span class="literal">A</span></span><br><span class="line">总共需要<span class="number">7</span>次乘法运算；</span><br><span class="line"></span><br><span class="line">将其平均分解：</span><br><span class="line"><span class="literal">A</span>^<span class="number">8</span> = (<span class="literal">A</span> * <span class="literal">A</span> * <span class="literal">A</span> * <span class="literal">A</span>) * (<span class="literal">A</span> * <span class="literal">A</span> * <span class="literal">A</span> * <span class="literal">A</span>) = (<span class="literal">A</span> * <span class="literal">A</span> * <span class="literal">A</span> * <span class="literal">A</span>) ^ <span class="number">2</span></span><br><span class="line">这样我们就只需要<span class="number">4</span>次乘法运算了；</span><br><span class="line"></span><br><span class="line">我们还可以将其再分解：</span><br><span class="line"><span class="literal">A</span>^<span class="number">6</span> = [(<span class="literal">A</span> * <span class="literal">A</span>) * (<span class="literal">A</span> * <span class="literal">A</span>)] ^ <span class="number">2</span> = [(<span class="literal">A</span> * <span class="literal">A</span>) ^ <span class="number">2</span>] ^ <span class="number">2</span></span><br><span class="line">这样就将乘法运算的次数减少为了<span class="number">3</span>次。</span><br></pre></td></tr></table></figure></p>
<p>当然，进行这样的分解需要满足一个前提：进行快速幂运算的数据类型必须是满足结合律的。然后，我们可以看出，这种二分解法将原本n次的运算降低为<code>logn / log2</code>次。在这样的思想指导下，我们可以得出一个O(logn)的优化算法：<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qPow</span><span class="params">(<span class="keyword">int</span> A, <span class="keyword">int</span> n)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> rslt = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &amp; <span class="number">1</span>) <span class="comment">//如果n为奇数</span></span><br><span class="line">        &#123;</span><br><span class="line">            rslt *= A;</span><br><span class="line">        &#125;</span><br><span class="line">        A *= A;</span><br><span class="line">        n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> rslt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="矩阵快速幂">矩阵快速幂</h1><p>矩阵和整数的快速幂运算算法在代数上应该是等价的，矩阵也具备快速幂运算所必需的条件：结合律。因此，我们在前面得出的结论也能应用到矩阵当中。<br>首先，我们需要实现一个矩阵类，重载一些运算符：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="literal">Matrix</span></span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    int <span class="keyword">N</span>; <span class="comment">// 矩阵维数</span></span><br><span class="line">    int** <span class="keyword">m</span>; <span class="comment">// 存储矩阵的二维数组</span></span><br><span class="line"></span><br><span class="line">    <span class="literal">Matrix</span>(int <span class="keyword">n</span> = 2)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">m</span> = new int*[<span class="keyword">n</span>];</span><br><span class="line">        <span class="keyword">for</span> (int i=0; i &lt; <span class="keyword">n</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">m</span>[i] = new int[<span class="keyword">n</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">N</span> = <span class="keyword">n</span>;</span><br><span class="line">        <span class="keyword">clear</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将矩阵清空为零矩阵</span></span><br><span class="line">    void <span class="keyword">clear</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (int i=0; i &lt; <span class="keyword">N</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            memset(<span class="keyword">m</span>[i], 0, sizeof(int) * <span class="keyword">N</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将矩阵设定为单位矩阵</span></span><br><span class="line">    void unit()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">clear</span>();</span><br><span class="line">        <span class="keyword">for</span> (int i=0; i &lt; <span class="keyword">N</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">m</span>[i][i] = 1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 矩阵的赋值</span></span><br><span class="line">    <span class="keyword">Matrix</span> operator= (<span class="keyword">Matrix</span> &amp;othr)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="literal">Matrix</span>(othr.<span class="keyword">N</span>);</span><br><span class="line">        <span class="keyword">for</span> (int i=0; i &lt; othr.<span class="keyword">N</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (int j=0; j &lt; othr.<span class="keyword">N</span>; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">m</span>[i][j] = othr.<span class="keyword">m</span>[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> *this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 矩阵的乘法</span></span><br><span class="line"><span class="comment">//!假设所有因子均为同阶方阵</span></span><br><span class="line">    <span class="keyword">Matrix</span> operator* (<span class="keyword">Matrix</span> &amp;othr)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">Matrix</span> rslt(othr.<span class="keyword">N</span>);</span><br><span class="line">        <span class="keyword">for</span> (int i=0; i &lt; othr.<span class="keyword">N</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (int j=0; j &lt; othr.<span class="keyword">N</span>; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (int k=0; k &lt; othr.<span class="keyword">N</span>; ++k)</span><br><span class="line">                &#123;</span><br><span class="line">                    rslt.<span class="keyword">m</span>[i][j] += <span class="keyword">m</span>[i][k] * othr.<span class="keyword">m</span>[k][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> rslt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>有了矩阵类，我们下面再依样画瓢地实现一遍快速幂运算：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Matrix</span> qMPow(<span class="keyword">Matrix</span> &amp;A, int <span class="keyword">n</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">Matrix</span> rslt(A.<span class="keyword">N</span>);</span><br><span class="line">    rslt.unit();</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">n</span> == 0) <span class="keyword">return</span> rslt;</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">n</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">n</span> &amp; 1) <span class="comment">// 若幂为奇数</span></span><br><span class="line">        &#123;</span><br><span class="line">            rslt = rslt * A;</span><br><span class="line">        &#125;</span><br><span class="line">        A = A * A;</span><br><span class="line">        <span class="keyword">n</span> &gt;&gt;= 1; <span class="comment">// 右位移等价于除以2</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> rslt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="引用">引用</h1><ul>
<li><a href="http://blueve.me/archives/660" target="_blank" rel="external">快速幂运算</a></li>
</ul>
<h1 id="更新日志">更新日志</h1><ul>
<li>2015年3月19日 首次发布。</li>
<li>2015年3月19日 补充了矩阵快速幂的内容。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="原始代码">原始代码</h1><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Pow</span><span class="params">(<span class="keyword">int</span> A, <span class="keyword">int</span> n)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> rslt = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        rslt *= A;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> rslt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="ACM" scheme="http://xuanwo.org/tags/ACM/"/>
    
      <category term="C" scheme="http://xuanwo.org/tags/C/"/>
    
      <category term="数论" scheme="http://xuanwo.org/tags/%E6%95%B0%E8%AE%BA/"/>
    
      <category term="Summary" scheme="http://xuanwo.org/categories/Summary/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[数论——筛法求素数]]></title>
    <link href="http://xuanwo.org/2015/03/18/number-theory-sieve-method-to-find-primes/"/>
    <id>http://xuanwo.org/2015/03/18/number-theory-sieve-method-to-find-primes/</id>
    <published>2015-03-18T17:16:01.000Z</published>
    <updated>2015-04-03T07:22:24.000Z</updated>
    <content type="html"><![CDATA[<h1 id="暴力瞎搞求素数">暴力瞎搞求素数</h1><p>首先，我们需要个判断是否为素数的算法：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsPrime</span><span class="params">(<span class="keyword">unsigned</span> n)</span>  <span class="comment">//此处n是一个大于2的整数</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">unsigned</span> i = <span class="number">2</span>; i &lt; n / <span class="number">2</span> + <span class="number">1</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (n % i == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>然后，在for循环中逐个判断。。。。。。<br><em>你写写看啊，- -，看看队友会不会打扁你。。。</em><br>显然，这个方法太傻逼了= =，我们需要一个效率更高，更为机智算法。</p>
<h1 id="一般的线性筛法">一般的线性筛法</h1><p>下面进入正题，我们来介绍一下求素数的线性筛法。</p>
<h2 id="代码">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">make_prime</span><span class="params">()</span>  </span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(prime, <span class="number">1</span>, <span class="keyword">sizeof</span>(prime));</span><br><span class="line">    prime[<span class="number">0</span>] = <span class="keyword">false</span>;</span><br><span class="line">    prime[<span class="number">1</span>] = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">int</span> N = <span class="number">31700</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>;  i &lt; N;  i++)</span><br><span class="line">        <span class="keyword">if</span> (prime[i]) </span><br><span class="line">        &#123;</span><br><span class="line">            primes[++cnt ] = i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = i * i; k &lt; N; k += i)</span><br><span class="line">                prime[k] = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这种方法比较好理解:<br>初始时，假设全部都是素数，当找到一个素数时，显然这个素数乘上另外一个数之后都是合数(注意上面的 i<em>i ,  比 i</em>2 要快点 )，把这些合数都筛掉，即算法名字的由来。<br>但仔细分析能发现，这种方法会造成重复筛除合数，影响效率。比如10，在i=2的时候，k=2<em>15筛了一次；在i=5，k=5</em>6 的时候又筛了一次。所以，也就有了快速线性筛法。</p>
<h1 id="快速线性筛法">快速线性筛法</h1><p>快速线性筛法没有冗余，不会重复筛除一个数，所以“几乎”是线性的，虽然从代码上分析，时间复杂度并不是O(n)。</p>
<h2 id="代码-1">代码</h2><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> N = <span class="number">200000</span>;</span><br><span class="line"><span class="keyword">long</span> prime[N] = &#123;<span class="number">0</span>&#125;, num_prime = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> isNotPrime[N] = &#123;<span class="number">1</span>, <span class="number">1</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">long</span> i = <span class="number">2</span> ; i &lt; N ; i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (! isNotPrime[i])</span><br><span class="line">            prime[num_prime ++] = i;</span><br><span class="line">        <span class="comment">//关键处1</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">long</span> j = <span class="number">0</span> ; j &lt; num_prime &amp;&amp; i * prime[j] &lt;  N ; j ++)</span><br><span class="line">        &#123;</span><br><span class="line">            isNotPrime[i * prime[j]] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> ( !(i % prime[j] ) ) <span class="comment">//关键处2</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="理解">理解</h2><p>首先，先明确一个条件，任何合数都能表示成一系列素数的积。<br>不管 i 是否是素数，都会执行到“关键处1”。</p>
<ol>
<li><p>如果 i 都是是素数的话，那简单，一个大的素数 i 乘以不大于 i 的素数，这样筛除的数跟之前的是不会重复的。筛出的数都是 N=p1*p2的形式, p1，p2之间不相等</p>
</li>
<li><p>如果 i 是合数，此时 i 可以表示成递增素数相乘 i=p1<em>p2</em>…*pn, pi都是素数（2&lt;=i&lt;=n），  pi&lt;=pj  ( i&lt;=j )<br>p1是最小的系数。</p>
</li>
</ol>
<p>根据“关键处2”的定义，当p1==prime[j] 的时候，筛除就终止了，也就是说，只能筛出不大于p1的质数*i。</p>
<p>我们可以直观地举个例子：<code>i=2*3*5</code><br>此时能筛除 2<em>i ,不能筛除 3</em>i，<br>如果能筛除3<em>i 的话，当 i’ 等于 i’=3</em>3<em>5 时，筛除2</em>i’ 就和前面重复了。</p>
<h1 id="引用">引用</h1><ul>
<li><a href="http://blog.csdn.net/dinosoft/article/details/5829550" target="_blank" rel="external">一般筛法求素数+快速线性筛法求素数</a></li>
<li><a href="http://coolshell.cn/articles/3738.html" target="_blank" rel="external">打印质数的各种算法</a></li>
</ul>
<h1 id="更新日子">更新日子</h1><ul>
<li>2015年03月18日 首次完成。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="暴力瞎搞求素数">暴力瞎搞求素数</h1><p>首先，我们需要个判断是否为素数的算法：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsPrime</span><span class="params">(<span class="keyword">unsigned</span> n)</span>  <span class="comment">//此处n是一个大于2的整数</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">unsigned</span> i = <span class="number">2</span>; i &lt; n / <span class="number">2</span> + <span class="number">1</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (n % i == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]>
    
    </summary>
    
      <category term="ACM" scheme="http://xuanwo.org/tags/ACM/"/>
    
      <category term="C" scheme="http://xuanwo.org/tags/C/"/>
    
      <category term="数论" scheme="http://xuanwo.org/tags/%E6%95%B0%E8%AE%BA/"/>
    
      <category term="Summary" scheme="http://xuanwo.org/categories/Summary/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[数论——欧几里得算法]]></title>
    <link href="http://xuanwo.org/2015/03/11/number-theory-gcd/"/>
    <id>http://xuanwo.org/2015/03/11/number-theory-gcd/</id>
    <published>2015-03-11T10:32:31.000Z</published>
    <updated>2015-04-03T07:22:24.000Z</updated>
    <content type="html"><![CDATA[<h1 id="欧几里得算法">欧几里得算法</h1><h2 id="介绍">介绍</h2><p>欧几里得算法，又名辗转相除法，是求最大公约数的算法。两个整数的最大公约数是能够同时整除它们的最大的正整数。辗转相除法基于如下原理：两个整数的最大公约数等于其中较小的数和两数的差的最大公约数。例如，252和105的最大公约数是21（252 = 21 × 12；105 = 21 × 5）；因为252 − 105 = 147，所以147和105的最大公约数也是21。在这个过程中，较大的数缩小了，所以继续进行同样的计算可以不断缩小这两个数直至其中一个变成零。这时，所剩下的还没有变成零的数就是两数的最大公约数。<br><img src="http://xuanwo.qiniudn.com/summary/Euclidean_algorithm_252_105_animation_flipped.gif" alt="辗转相除法的演示动画"><br>参考辗转相除法的演示动画：两条线段分别表示252和105，其中每一段表示21。动画演示了循环从大数中减去小数，直到其中一段的长度为0，此时剩下的一条线段的长度就是252和105的最大公约数。</p>
<a id="more"></a>
<h2 id="关于最大公约数">关于最大公约数</h2><ul>
<li><strong>基础定义</strong></li>
</ul>
<p>欧几里得的辗转相除法计算的是两个自然数a和b的最大公约数g，意思是能够同时整除a和b的自然数中最大的一个。两个数的最大公约数通常写成gcd(a, b)，如果有gcd(a, b)==1，则有a，b互质。<br><img src="http://xuanwo.qiniudn.com/summary/150px-Square_tiling_24x60.svg.png" alt="最大公约数"><br>参考最大公约数的演示动画：一个24×60的长方形正好被十个12×12的方格填满，其中12是24和60的最大公约数。一般地，当且仅当c是a和b的公约数时，a×b尺寸的长方形可被边长c的正方形正好填满。</p>
<ul>
<li><strong>环论定义</strong></li>
</ul>
<p>在数学中，尤其是高等数学的环论中，最大公约数有一个更加巧妙的定义：a和b的最大公约数g是a和b的线性和中（绝对值）最小的一个，即所有形如ua + vb（其中u和v是整数）的数中（绝对值）最小的数。所有ua + vb都是g的整数倍（ua + vb = mg，其中m是整数）。</p>
<h2 id="举例">举例</h2><p>例如，计算a = 1071和b = 462的最大公约数的过程如下：从1071中不断减去462直到小于462（可以减2次，即商q0 = 2），余数是147：<br>1071 = 2 × 462 + 147.<br>然后从462中不断减去147直到小于147（可以减3次，即q1 = 3），余数是21：<br>462 = 3 × 147 + 21.<br>再从147中不断减去21直到小于21（可以减7次，即q2 = 7），没有余数：<br>147 = 7 × 21 + 0.<br>此时，余数是0，所以1071和462的最大公约数是21。</p>
<h2 id="算法">算法</h2><h3 id="递归">递归</h3><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Gcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(b == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    <span class="function"><span class="keyword">return</span> <span class="title">Gcd</span><span class="params">(b, a % b)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="迭代">迭代</h3><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Gcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(b != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> r = b;</span><br><span class="line">        b = a % b;</span><br><span class="line">        a = r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="扩展欧几里得算法">扩展欧几里得算法</h1><h2 id="介绍-1">介绍</h2><p>扩展欧几里德算法是用来在已知a, b求解一组p，q使得<code>p*a+q*b=Gcd(a,b)</code>(根据数论中的相关定理解一定存在，不展开叙述)。扩展欧几里德常用在求解模线性方程及方程组中。</p>
<h2 id="算法-1">算法</h2><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">exGcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> &amp;x, <span class="keyword">int</span> &amp;y)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(b == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x = <span class="number">1</span>;</span><br><span class="line">        y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> r = exGcd(b, a % b, x, y);</span><br><span class="line">    <span class="keyword">int</span> t = x;</span><br><span class="line">    x = y;</span><br><span class="line">    y = t - a / b * y;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="理解">理解</h2><p>把这个实现和Gcd的递归实现相比，发现多了下面的x,y赋值过程，这就是扩展欧几里德算法的精髓。<br>可以这样思考:<br>对于<code>a&#39; =b</code> , <code>b&#39; =a%b</code> 而言，我们求得x, y使得<code>a&#39; x+b&#39; y=Gcd(a&#39;, b&#39;)</code><br>由于<code>b&#39; = a % b = a - a / b * b</code><br>那么可以得到:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a<span class="string">' x + b'</span> y = <span class="function"><span class="title">Gcd</span><span class="params">(a<span class="string">' , b'</span>)</span></span>  </span><br><span class="line">===&gt;</span><br><span class="line">bx + (<span class="tag">a</span> - a/<span class="tag">b</span> *b)y = <span class="function"><span class="title">Gcd</span><span class="params">(a<span class="string">' , b'</span>)</span></span> = <span class="function"><span class="title">Gcd</span><span class="params">(a, b)</span></span>  <span class="comment">//注意到这里的/是C语言中的出发</span></span><br><span class="line">===&gt;</span><br><span class="line">ay + <span class="function"><span class="title">b</span><span class="params">(x- a/b *y)</span></span> = <span class="function"><span class="title">Gcd</span><span class="params">(a, b)</span></span></span><br></pre></td></tr></table></figure></p>
<p>因此对于a和b而言，他们的相对应的p，q分别是 y和(x-a/b*y)</p>
<h1 id="Stein算法">Stein算法</h1><h2 id="介绍-2">介绍</h2><p>Stein算法由J. Stein 1961年提出，这个方法也是计算两个数的最大公约数。和欧几里德算法 算法不同的是，Stein算法只有整数的移位和加减法，因此对于大素数Stein将更有优势。</p>
<h2 id="描述">描述</h2><p>注意到如下结论：</p>
<ol>
<li>如果A=0，B是最大公约数，算法结束 </li>
<li>如果B=0，A是最大公约数，算法结束 </li>
<li>设置A1=A、B1=B和C1=1 </li>
<li>如果An和Bn都是偶数，则An+1=An&gt;&gt;1，Bn+1=Bn&gt;&gt;1，Cn+1=Cn&lt;&lt;1</li>
<li>如果An是偶数，Bn不是偶数，则An+1=An&gt;&gt;1，Bn+1=Bn，Cn+1=Cn(很显然，2不是奇数的约数) </li>
<li>如果Bn是偶数，An不是偶数，则Bn+1=B&gt;&gt;1，An+1=An，Cn+1=Cn(很显然，2不是奇数的约数) </li>
<li>如果An和Bn都不是偶数，则An+1=|An-Bn|&gt;&gt;1，Bn+1=min(An,Bn)，Cn+1=Cn </li>
<li>n加1，转1</li>
</ol>
<h2 id="算法-2">算法</h2><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Gcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a == <span class="number">0</span>) <span class="keyword">return</span> b;</span><br><span class="line">    <span class="keyword">if</span>(b == <span class="number">0</span>) <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">if</span>(a % <span class="number">2</span> == <span class="number">0</span> &amp;&amp; b % <span class="number">2</span> == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">2</span> * gcd(a &gt;&gt; <span class="number">1</span>, b &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(a % <span class="number">2</span> == <span class="number">0</span>)  <span class="function"><span class="keyword">return</span> <span class="title">gcd</span><span class="params">(a &gt;&gt; <span class="number">1</span>, b)</span></span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(b % <span class="number">2</span> == <span class="number">0</span>) <span class="function"><span class="keyword">return</span> <span class="title">gcd</span><span class="params">(a, b &gt;&gt; <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> gcd(abs(a - b), Min(a, b));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="应用">应用</h1><ul>
<li><strong>求解不定方程</strong></li>
</ul>
<p>对于不定整数方程pa+qb=c，若 c mod Gcd(p, q)=0,则该方程存在整数解，否则不存在整数解。<br>上面已经列出找一个整数解的方法，在找到p <em> a+q </em> b = Gcd(p, q)的一组解p0,q0后，p <em> a+q </em> b = Gcd(p, q)的其他整数解满足：</p>
<ol>
<li>p = p0 + b/Gcd(p, q) * t </li>
<li>q = q0 - a/Gcd(p, q) * t(其中t为任意整数)</li>
</ol>
<p>至于pa+qb=c的整数解，只需将p <em> a+q </em> b = Gcd(p, q)的每个解乘上 c/Gcd(p, q) 即可。<br>在找到p <em> a+q </em> b = Gcd(a, b)的一组解p0,q0后，应该是得到p <em> a+q </em> b = c的一组解p1 = p0<em>(c/Gcd(a,b)),q1 = q0</em>(c/Gcd(a,b))，p <em> a+q </em> b = c的其他整数解满足：</p>
<ol>
<li>p = p1 + b/Gcd(a, b) * t</li>
<li>q = q1 - a/Gcd(a, b) * t(其中t为任意整数)</li>
</ol>
<p>此处的p 、q就是p <em> a+q </em> b = c的所有整数解。</p>
<ul>
<li><strong>求解模线性方程（线性同余方程）</strong></li>
</ul>
<p>同余方程 ax≡b (mod n)对于未知数 x 有解，当且仅当 gcd(a,n) | b。且方程有解时，方程有 gcd(a,n) 个解。<br>求解方程 ax≡b (mod n) 相当于求解方程 ax+ ny= b, (x, y为整数)。<br>设 d= gcd(a,n)，假如整数 x 和 y，满足 d= ax+ ny(用扩展欧几里德得出)。如果 d| b，则方程a<em> x0+ n</em> y0= d， 方程两边乘以 b/ d，(因为 d|b，所以能够整除)，得到 a<em> x0</em> b/ d+ n<em> y0</em> b/ d= b。<br>所以 x= x0<em> b/ d，y= y0</em> b/ d 为 ax+ ny= b 的一个解，所以 x= x0<em> b/ d 为 ax= b (mod n ) 的解。<br>ax≡b (mod n)的一个解为 x0= x</em> (b/ d ) mod n，且方程的 d 个解分别为 xi= (x0+ i<em> (n/ d ))mod n {i= 0… d-1}。<br>设ans=x</em>(b/d),s=n/d;<br>方程ax≡b (mod n)的最小整数解为：(ans%s+s)%s;</p>
<ul>
<li><strong>求解模的逆元</strong></li>
</ul>
<p>同余方程ax≡b (mod n)，如果 gcd(a,n)== 1，则方程只有唯一解。<br>在这种情况下，如果 b== 1，同余方程就是 ax=1 (mod n ),gcd(a,n)= 1。这时称求出的 x 为 a 的对模 n 乘法的逆元。<br>对于同余方程 ax= 1(mod n )， gcd(a,n)= 1 的求解就是求解方程ax+ ny= 1，x, y 为整数。这个可用扩展欧几里德算法求出，原同余方程的唯一解就是用扩展欧几里德算法得出的 x 。</p>
<h1 id="引用">引用</h1><ul>
<li><a href="http://www.cnblogs.com/drizzlecrj/archive/2007/09/14/892340.html" target="_blank" rel="external">最大公约数(Gcd)两种算法(Euclid &amp;&amp; Stein) [整理]</a></li>
<li><a href="http://zh.wikipedia.org/wiki/%E8%BC%BE%E8%BD%89%E7%9B%B8%E9%99%A4%E6%B3%95" target="_blank" rel="external">辗转相除法</a></li>
<li><a href="http://blog.csdn.net/suool/article/details/14094255" target="_blank" rel="external">ACM 进阶学习第一课——同余相关之欧几里得算法及其扩展（2）</a></li>
</ul>
<h1 id="更新日志">更新日志</h1><ul>
<li>2015年03月18日 拖了这么久，总算写完了= =。</li>
<li>2015年03月19日 补充了扩展欧几里得算法的一些应用。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="欧几里得算法">欧几里得算法</h1><h2 id="介绍">介绍</h2><p>欧几里得算法，又名辗转相除法，是求最大公约数的算法。两个整数的最大公约数是能够同时整除它们的最大的正整数。辗转相除法基于如下原理：两个整数的最大公约数等于其中较小的数和两数的差的最大公约数。例如，252和105的最大公约数是21（252 = 21 × 12；105 = 21 × 5）；因为252 − 105 = 147，所以147和105的最大公约数也是21。在这个过程中，较大的数缩小了，所以继续进行同样的计算可以不断缩小这两个数直至其中一个变成零。这时，所剩下的还没有变成零的数就是两数的最大公约数。<br><img src="http://xuanwo.qiniudn.com/summary/Euclidean_algorithm_252_105_animation_flipped.gif" alt="辗转相除法的演示动画"><br>参考辗转相除法的演示动画：两条线段分别表示252和105，其中每一段表示21。动画演示了循环从大数中减去小数，直到其中一段的长度为0，此时剩下的一条线段的长度就是252和105的最大公约数。</p>]]>
    
    </summary>
    
      <category term="ACM" scheme="http://xuanwo.org/tags/ACM/"/>
    
      <category term="C" scheme="http://xuanwo.org/tags/C/"/>
    
      <category term="数论" scheme="http://xuanwo.org/tags/%E6%95%B0%E8%AE%BA/"/>
    
      <category term="Summary" scheme="http://xuanwo.org/categories/Summary/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[青云参观计划]]></title>
    <link href="http://xuanwo.org/2015/02/18/Event-Qingcould-Plan/"/>
    <id>http://xuanwo.org/2015/02/18/Event-Qingcould-Plan/</id>
    <published>2015-02-18T22:50:33.000Z</published>
    <updated>2015-04-03T07:22:24.000Z</updated>
    <content type="html"><![CDATA[<h1 id="青云是啥？">青云是啥？</h1><ul>
<li><a href="http://www.36kr.com/p/204836.html" target="_blank" rel="external">想做中国的AWS：IaaS提供商QingCloud按“秒”计费实现弹性特征，瞄准中国的DevOps开发市场</a></li>
<li><a href="http://www.csdn.net/article/2013-08-20/2816631-IaaS-QingCloud" target="_blank" rel="external">国内创业公司QingCloud的魄力：做一个世界级的IaaS服务</a></li>
<li><a href="http://capital.chinaventure.com.cn/11/7/1389263145.shtml" target="_blank" rel="external">青云B轮获2000万美元VC的背后逻辑：用技术超越巨头</a></li>
</ul>
<p>个人认为对其的了解有助与我们信息管理专业的发展，所以尝试着联系了一下青云的有关人士。后来发现青云那边的人非常nice，非常热心，非常爽快的同意了我们的请求，所以开学后不久我们就可以出发啦。</p>
<h1 id="青云在哪？">青云在哪？</h1><p>地址：北京市朝阳区北苑路甲13号北辰新纪元大厦2号楼1503<br>公交路线：地铁13号线 → 地铁2号线 → 地铁5号线全程约1小时<br><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">五道口</span><br><span class="line"> 	<span class="number">3</span>站</span><br><span class="line">乘坐 地铁<span class="number">13</span>号线<span class="comment">(西直门方向)</span>, 在 西直门站 下车   </span><br><span class="line"><span class="number">420</span>米</span><br><span class="line">站内换乘 地铁<span class="number">2</span>号线<span class="comment">(内环)</span></span><br><span class="line"> 	<span class="number">4</span>站</span><br><span class="line">乘坐 地铁<span class="number">2</span>号线<span class="comment">(内环)</span>, 在 雍和宫站 下车</span><br><span class="line"><span class="number">160</span>米</span><br><span class="line">站内换乘 地铁<span class="number">5</span>号线<span class="comment">(天通苑北方向)</span></span><br><span class="line"> 	<span class="number">6</span>站</span><br><span class="line">乘坐 地铁<span class="number">5</span>号线<span class="comment">(天通苑北方向)</span>, 在 北苑路北站 下车<span class="comment">(A2西北口出)</span> </span><br><span class="line"><span class="number">350</span>米</span><br><span class="line">步行至 北辰新纪元<span class="number">2</span></span><br></pre></td></tr></table></figure></p>
<h1 id="去看什么？">去看什么？</h1><ul>
<li>公司参观</li>
<li>员工分享个人经历</li>
<li>CEO分享关于云计算的理解</li>
</ul>
<h1 id="啥时候去？">啥时候去？</h1><p>2015年3月19日14点</p>
<h1 id="有啥收获？">有啥收获？</h1><p>这个根据看到了什么而定，不过涨姿势肯定是有的~<br><em>我想看看真正的服务器长啥样= =</em></p>
<h1 id="更新日志">更新日志</h1><ul>
<li>2015年02月18日 发起活动，修正行文格式。</li>
<li>2015年03月18日 补充活动更新信息。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="青云是啥？">青云是啥？</h1><ul>
<li><a href="http://www.36kr.com/p/204836.html" target="_blank" rel="external">想做中国的AWS：IaaS提供商QingCloud按“秒”计费]]>
    </summary>
    
      <category term="Cloud" scheme="http://xuanwo.org/tags/Cloud/"/>
    
      <category term="Event" scheme="http://xuanwo.org/tags/Event/"/>
    
      <category term="Daily" scheme="http://xuanwo.org/categories/Daily/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Codeforces Beta Round 65 A Way Too Long Words (Div. 2)]]></title>
    <link href="http://xuanwo.org/2015/02/10/CF-71A/"/>
    <id>http://xuanwo.org/2015/02/10/CF-71A/</id>
    <published>2015-02-10T23:11:25.000Z</published>
    <updated>2015-04-03T07:22:24.000Z</updated>
    <content type="html"><![CDATA[<h1 id="题目">题目</h1><p>源地址：<a href="http://codeforces.com/problemset/problem/71/A" target="_blank" rel="external">http://codeforces.com/problemset/problem/71/A</a></p>
<h1 id="理解">理解</h1><p>刷水题，保持手指灵活性= =</p>
<a id="more"></a>
<h1 id="代码">代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdlib&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstring&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cmath&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;ctime&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;algorithm&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;vector&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;deque&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;list&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;set&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;map&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stack&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;queue&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;numeric&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iomanip&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;bitset&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;sstream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;fstream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> debug puts("-----")</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> pi (acos(-1.0))</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> eps (1e-8)</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> inf (1&lt;&lt;28)</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> ll long long int</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> MAXN 100+10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">char</span> a[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">while</span> (n--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span>(a));</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, a);</span><br><span class="line">        <span class="keyword">int</span> len = <span class="built_in">strlen</span>(a);</span><br><span class="line">        <span class="keyword">if</span> (len &lt;= <span class="number">10</span>) <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; a[<span class="number">0</span>] &lt;&lt; len - <span class="number">2</span> &lt;&lt; a[len - <span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="更新日志">更新日志</h1><ul>
<li>2015年2月10日 已AC。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="题目">题目</h1><p>源地址：<a href="http://codeforces.com/problemset/problem/71/A">http://codeforces.com/problemset/problem/71/A</a></p>
<h1 id="理解">理解</h1><p>刷水题，保持手指灵活性= =</p>]]>
    
    </summary>
    
      <category term="ACM" scheme="http://xuanwo.org/tags/ACM/"/>
    
      <category term="C" scheme="http://xuanwo.org/tags/C/"/>
    
      <category term="Codeforces" scheme="http://xuanwo.org/tags/Codeforces/"/>
    
      <category term="字符串" scheme="http://xuanwo.org/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="Exercise" scheme="http://xuanwo.org/categories/Exercise/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[VK Cup 2012 Qualification Round 1 A Next Round]]></title>
    <link href="http://xuanwo.org/2015/02/10/CF-158A/"/>
    <id>http://xuanwo.org/2015/02/10/CF-158A/</id>
    <published>2015-02-10T22:07:24.000Z</published>
    <updated>2015-04-03T07:22:24.000Z</updated>
    <content type="html"><![CDATA[<h1 id="题目">题目</h1><p>源地址：<a href="http://codeforces.com/problemset/problem/158/A" target="_blank" rel="external">http://codeforces.com/problemset/problem/158/A</a></p>
<h1 id="理解">理解</h1><p>水题</p>
<a id="more"></a>
<h1 id="代码">代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdlib&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstring&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cmath&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;ctime&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;algorithm&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;vector&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;deque&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;list&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;set&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;map&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stack&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;queue&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;numeric&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iomanip&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;bitset&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;sstream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;fstream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> debug puts("-----")</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> pi (acos(-1.0))</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> eps (1e-8)</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> inf (1&lt;&lt;28)</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> ll long long int</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> MAXN 50+10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="keyword">int</span> a[MAXN];</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &gt; y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;k);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    sort(a, a + n, cmp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">    	<span class="keyword">if</span>(a[i]&gt;=a[k-<span class="number">1</span>]&amp;&amp;a[i]&gt;<span class="number">0</span>)	ans++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="更新日志">更新日志</h1><ul>
<li>2015年2月10日 已AC。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="题目">题目</h1><p>源地址：<a href="http://codeforces.com/problemset/problem/158/A">http://codeforces.com/problemset/problem/158/A</a></p>
<h1 id="理解">理解</h1><p>水题</p>]]>
    
    </summary>
    
      <category term="ACM" scheme="http://xuanwo.org/tags/ACM/"/>
    
      <category term="C" scheme="http://xuanwo.org/tags/C/"/>
    
      <category term="Codeforces" scheme="http://xuanwo.org/tags/Codeforces/"/>
    
      <category term="模拟" scheme="http://xuanwo.org/tags/%E6%A8%A1%E6%8B%9F/"/>
    
      <category term="Exercise" scheme="http://xuanwo.org/categories/Exercise/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用Github SSH Key以免去Hexo部署时输入密码]]></title>
    <link href="http://xuanwo.org/2015/02/07/generate-a-ssh-key/"/>
    <id>http://xuanwo.org/2015/02/07/generate-a-ssh-key/</id>
    <published>2015-02-07T14:40:16.000Z</published>
    <updated>2015-04-03T07:22:24.000Z</updated>
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>原文本来放在<a href="http://xuanwo.org/2014/08/14/hexo-usual-problem/" target="_blank" rel="external">Hexo常见问题解决方案</a>之中，但是由于步骤较多，理解起来比较困难，因此将本文独立出来单独成篇，以便于进行操作。</p>
<a id="more"></a>
<h1 id="操作">操作</h1><h2 id="修改_config-yml">修改_config.yml</h2><p>将_config.yml的git信息修改为SSH形式。</p>
<h2 id="列出已存在的SSH_Key">列出已存在的SSH Key</h2><p>打开Git Bash，并且输入：<br><code>ls -al ~/.ssh</code><br>这个命令会列出你<code>.ssh</code>账户中已经存在的SSH key，如果之前没有设置过，一般都是没有。</p>
<h2 id="生成密钥">生成密钥</h2><p>然后输入：<br><code>ssh-keygen -t rsa -C &quot;your_email@example.com&quot;</code><br>这个命令将会生成一个以<code>your_email@example.com</code>为标签的ssh key，然后bash中会显示：<br><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Generating <span class="keyword">public</span>/<span class="keyword">private</span> rsa <span class="keyword">key</span> pair.</span><br><span class="line">Enter file <span class="keyword">in</span> which <span class="keyword">to</span> save the <span class="keyword">key</span> (/c/Users/you/.ssh/id_rsa): [Press enter]</span><br></pre></td></tr></table></figure></p>
<p>直接回车，然后出现：<br><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Enter passphrase (<span class="keyword">empty</span> <span class="keyword">for</span> no passphrase): [<span class="keyword">Type</span> a passphrase]</span><br><span class="line">Enter same passphrase again: [<span class="keyword">Type</span> passphrase again]</span><br></pre></td></tr></table></figure></p>
<p>因为追求操作方便，我们不打算在deploy的时候输入这个<code>passphrase</code>，所以直接回车两次设为空。然后你会看到：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Your identification has been saved <span class="keyword">in</span> <span class="regexp">~/.ssh/</span>id_rsa.</span><br><span class="line">Your <span class="keyword">public</span> key has been saved <span class="keyword">in</span> <span class="regexp">~/.ssh/</span>id_rsa.pub.</span><br><span class="line">The key fingerprint <span class="string">is:</span></span><br><span class="line"><span class="number">01</span>:<span class="number">0</span><span class="string">f:</span><span class="string">f4:</span><span class="number">3</span><span class="string">b:</span><span class="string">ca:</span><span class="number">85</span>:<span class="string">d6:</span><span class="number">17</span>:<span class="string">a1:</span><span class="number">7</span><span class="string">d:</span><span class="string">f0:</span><span class="number">68</span>:<span class="number">9</span><span class="string">d:</span><span class="string">f0:</span><span class="string">a2:</span>db your_email<span class="annotation">@example</span>.com</span><br></pre></td></tr></table></figure></p>
<h2 id="加入SSH_Agent">加入SSH Agent</h2><p>下一步输入：<br><code>ssh-agent -s</code><br>如果出现类似<code>Agent pid XXXX</code>这样的字样，则跳过下一步，否则输入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span> `ssh-agent <span class="operator">-s</span>`</span><br></pre></td></tr></table></figure></p>
<p>直到出现<code>Agent pid XXXX</code>这样的提示之后，输入：<br><code>ssh-add ~/.ssh/id_rsa</code><br>这样，你成功的在本地生成了一个可用的SSH key。</p>
<h2 id="将SSH_Key添加到Github中">将SSH Key添加到Github中</h2><p>下面将这个key添加到github网站。<br>打开<a href="https://github.com/settings/ssh" target="_blank" rel="external">https://github.com/settings/ssh</a>，点击<code>Add SSH Key</code>，复制<code>id_rsa.pub</code>中的所有内容到<code>Key</code>框中，在<code>Title</code>框中输入方便自己记忆的名字（建议输入能让自己明白是哪台电脑的名字，方便以后管理）。<br>当网页显示添加成功后，就已经完成了全部的操作。<br>下面进行一些测试，同样是打开Git Bash，输入：<br><code>ssh -T git@github.com</code><br>bash中会显示如下字样：<br><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">The authenticity <span class="keyword">of</span> host <span class="comment">'github.com (207.97.227.239)' can't be established.</span></span><br><span class="line">RSA <span class="keyword">key</span> fingerprint <span class="keyword">is</span> <span class="number">16</span>:<span class="number">27</span>:ac:a5:<span class="number">76</span>:<span class="number">28</span>:<span class="number">2</span>d:<span class="number">36</span>:<span class="number">63</span>:<span class="number">1</span>b:<span class="number">56</span>:<span class="number">4</span>d:eb:df:a6:<span class="number">48.</span></span><br><span class="line">Are you sure you want <span class="keyword">to</span> <span class="keyword">continue</span> connecting (yes/no)?</span><br></pre></td></tr></table></figure></p>
<p>输入yes之后，计算机会自动将<code>github.com</code>列入已知的host，然后会出现如下提示：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hi username! You've successfully authenticated, <span class="keyword">but</span> GitHub <span class="keyword">does</span> <span class="keyword">not</span></span><br><span class="line">provide shell access.</span><br></pre></td></tr></table></figure></p>
<p>如果成功看见，说明你已经配置好了，快去享受爽快的hexo一键部署吧；<br>如果出现任何错误提示，请仔细检查自己的操作，或者将错误信息发给我。</p>
<h1 id="更新日志">更新日志</h1><ul>
<li>2015年02月07日 独立成篇。</li>
<li>2015年02月16日 补充<code>_config.yml</code>的修改。</li>
<li>2015年03月22日 修复了一处代码显示BUG。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="前言">前言</h1><p>原文本来放在<a href="http://xuanwo.org/2014/08/14/hexo-usual-problem/">Hexo常见问题解决方案</a>之中，但是由于步骤较多，理解起来比较困难，因此将本文独立出来单独成篇，以便于进行操作。</p>]]>
    
    </summary>
    
      <category term="Blog" scheme="http://xuanwo.org/tags/Blog/"/>
    
      <category term="Github-Pages" scheme="http://xuanwo.org/tags/Github-Pages/"/>
    
      <category term="Hexo" scheme="http://xuanwo.org/tags/Hexo/"/>
    
      <category term="Opinion" scheme="http://xuanwo.org/categories/Opinion/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用Travis CI自动部署Hexo]]></title>
    <link href="http://xuanwo.org/2015/02/07/Travis-CI-Hexo-Autodeploy/"/>
    <id>http://xuanwo.org/2015/02/07/Travis-CI-Hexo-Autodeploy/</id>
    <published>2015-02-07T14:00:51.000Z</published>
    <updated>2015-04-03T07:22:24.000Z</updated>
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>前两天了解到了一个有趣的概念叫持续集成：</p>
<blockquote>
<p>持续集成是一种软件开发实践。在持续集成中，团队成员频繁集成他们的工作成果，一般每人每天至少集成一次，也可以多次。每次集成会经过自动构建（包括自动测试）的检验，以尽快发现集成错误。许多团队发现这种方法可以显著减少集成引起的问题，并可以加快团队合作软件开发的速度。这篇文章简要介绍了持续集成的技巧和它最新的应用。<br>然后想到我的博客也恰好满足这样的需求，因为我的博客一旦有了修改，就必须要重新build并且部署，那么能不能用持续集成的思想来改造我部署博客的流程呢？</p>
</blockquote>
<p>在这样的指导思想下，我完成了上一篇文章：<a href="http://xuanwo.org/2015/02/05/VPS-Hexo-Autodeploy/" target="_blank" rel="external">VPS搭配Github Webhook实现Hexo自动发布</a>，而今天我要介绍一下，在没有VPS的情况下，如何更方便的配置自己的持续集成的博客。</p>
<h1 id="好处">好处</h1><ul>
<li>方便：只需要一次配置，便省去了每一次编辑文档后，都需要进行<code>hexo d -g</code>的麻烦，更不必说文章增多之后渲染时间还会增长。</li>
<li>稳定：这个是最近才发现的，Github被搞了之后，很多人反映不能更新博客了，使用<code>Travis CI</code>，你只要想办法提交一个小md文档，就能进行构建。如果自己手动构建，只要一个文件上传失败，前面的工作都白费了。</li>
</ul>
<a id="more"></a>
<h1 id="Travis_CI介绍">Travis CI介绍</h1><blockquote>
<p>Travis CI是在软件开发领域中的一个在线的，分布式的持续集成服务，用来构建及测试在GitHub托管的代码。这个软件的代码同时也是开源的，可以在GitHub上下载到，尽管开发者当前并不推荐在闭源项目中单独使用它。<br>它提供了多种编程语言的支持，包括Ruby，JavaScript，Java，Scala，PHP，Haskell和Erlang在内的多种语言。许多知名的开源项目使用它来在每次提交的时候进行构建测试，比如Ruby on Rails，Ruby和Node.js。<br>2012年，Travis CI 决定进行募资以支持后续的开发，在这次募资活动中，许多重量级的科技公司给予了资助。</p>
</blockquote>
<p>需要注意的是几个特性：</p>
<ul>
<li>只支持Github</li>
<li>支持JavaScript</li>
<li>开源，免费</li>
</ul>
<p>然后介绍一下它的原理：<br>Travis CI会在你每一次提交之后生成一个虚拟机来执行你事先安排好的build任务，你可以调整这个虚拟机的软件环境，甚至能执行<code>sudo</code>来进行<code>apt-get install</code>。</p>
<h1 id="Travis_CI配置">Travis CI配置</h1><p>我们知道，Hexo的命令非常简单，一个<code>hexo d -g</code>就可以搞定。困难之处在于，Travis CI并没有对你的库进行push操作的权限。如果直接将私钥放在自己的开源库之中，这无异于将自己的代码库提交权限开放给了所有的Github使用者。所以，为了保护自己，我们需要采取一些配置操作。</p>
<p><em>感谢Hexo作者<a href="http://zespia.tw/" target="_blank" rel="external">tommy351</a>提供的操作流程，原文可见于<a href="http://zespia.tw/blog/2015/01/21/continuous-deployment-to-github-with-travis/" target="_blank" rel="external">用 Travis CI 自動部署網站到 GitHub</a></em></p>
<h2 id="生成SSH_Key">生成SSH Key</h2><p>参见<a href="http://xuanwo.org/2015/02/07/generate-a-ssh-key/" target="_blank" rel="external">使用Github SSH Key以免去Hexo部署时输入密码</a><br>需要注意的是，这个SSH key不应成为你账号的全局SSH key<em>（因为这样Travis CI就获得了你所有代码库的提交权限，这是不正确的）</em>，而应该添加至<a href="https://github.com/username/ropename/settings/keys" target="_blank" rel="external">https://github.com/username/ropename/settings/keys</a> ，这样，你就控制了Travis CI的权限。</p>
<h2 id="加密私钥">加密私钥</h2><p>下面的操作需要事先配置好gem环境，如果没有可以尝试使用<a href="http://xuanwo.org/2014/08/07/Cloud9/" target="_blank" rel="external">强大且配置项丰富的在线IDE应用——Cloud9</a>。</p>
<h3 id="安装Travis_CI的命令行工具">安装Travis CI的命令行工具</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem <span class="keyword">install</span> travis</span><br></pre></td></tr></table></figure>
<h3 id="登陆Travis_CI">登陆Travis CI</h3><p>需要输入Github账号和密码<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">travis login <span class="comment">--auto</span></span><br></pre></td></tr></table></figure></p>
<h3 id="加密私钥并上传至Travis">加密私钥并上传至Travis</h3><p>正确生成后你会得到两个文件，一个叫<code>ssh_key</code>，一个叫<code>ssh_key.pub</code>。刚才我们将<code>ssh_key.pub</code>添加到了github，下面我们要加密<code>ssh_key</code>这个私钥并且上传到Travis。<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">travis <span class="built_in">encrypt</span>-<span class="built_in">file</span> ssh_key <span class="comment">--add</span></span><br></pre></td></tr></table></figure></p>
<p>然后Travis的客户端会自动检测当前目录中的git信息，并且添加到<code>.travis.yml</code>中去。在进行此步操作前，目录下要先存在<code>.travis.yml</code>文件，否则会报错。</p>
<h3 id="指定SSH设置">指定SSH设置</h3><p>在当前目录下新建文件<code>ssh_config</code>，内容为<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">Host</span> github.com</span><br><span class="line">  User git</span><br><span class="line">  StrictHostKeyChecking <span class="built_in">no</span></span><br><span class="line">  IdentityFile ~/.ssh/id_rsa</span><br><span class="line">  IdentitiesOnly <span class="built_in">yes</span></span><br></pre></td></tr></table></figure></p>
<p>然后指定openssl解密后的生成位置，修改Travis自动插入的解密指令(不要照抄，注意修改密钥)<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby"> openssl aes-<span class="number">256</span>-cbc -<span class="constant">K</span> <span class="variable">$encrypted_xxxxxxxxxx_key</span> -iv <span class="variable">$encrypted_xxxxxxxxxx_iv</span></span><br><span class="line"></span>  -<span class="ruby"><span class="keyword">in</span> travis.enc -out ~<span class="regexp">/.ssh/id</span>_rsa -d</span></span><br></pre></td></tr></table></figure></p>
<h3 id="修改目录权限">修改目录权限</h3><p>紧跟那条解密指令，换行输入：<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby"> chmod <span class="number">600</span> ~<span class="regexp">/.ssh/id</span>_rsa</span></span><br></pre></td></tr></table></figure></p>
<p>注意yml格式，短杠后面的空格不能省略。</p>
<h3 id="将密钥加入系统">将密钥加入系统</h3><p>紧跟上一步操作，换行输入：<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby"> eval <span class="variable">$(</span>ssh-agent)</span><br><span class="line"></span>-<span class="ruby"> ssh-add ~<span class="regexp">/.ssh/id</span>_rsa</span></span><br></pre></td></tr></table></figure></p>
<h3 id="修改git信息">修改git信息</h3><p>将之前创建的ssh_config复制到Travis的虚拟机中去，输入：<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby"> cp ssh_config ~<span class="regexp">/.ssh/config</span></span></span><br></pre></td></tr></table></figure></p>
<p>然后制定git使用者信息：<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby"> git config --global user.name <span class="string">"username"</span></span><br><span class="line"></span>-<span class="ruby"> git config --global user.email username<span class="variable">@example</span>.com</span></span><br></pre></td></tr></table></figure></p>
<h2 id="Build配置">Build配置</h2><p>之前的所有操作都只是为了让Travis CI拥有push权限，下面我们开始进入到真正的Build配置当中。<br>之前我们用到了一个名为<code>.travis.yml</code>的文件，跟build有关的所有设置都在这个文件里面，下面的操作都在这个文件当中进行。</p>
<h3 id="指定环境">指定环境</h3><p>在文件中添加如下代码：<br><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">language</span>: <span class="string">node_js</span></span><br><span class="line"></span><br><span class="line"><span class="groovy"><span class="string">node_js:</span></span><br><span class="line">- <span class="string">'0.10'</span>   <span class="comment">//指定使用node.js最新的稳定版0.10</span></span></span><br></pre></td></tr></table></figure></p>
<h3 id="指定分支">指定分支</h3><p>在文件中添加如下代码：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">branches</span>:</span><br><span class="line">  <span class="attribute">only</span>:</span><br><span class="line">  - blog    <span class="comment">//这个分支应当使用自己的源文件分支</span></span><br></pre></td></tr></table></figure></p>
<p>差点忘了讲- -，本方案只适用于用github来托管自己自己的hexo目录的用户。这里的分支应该使用包含有.md文档的那个分支。</p>
<h3 id="Hexo配置">Hexo配置</h3><p>首先在虚拟机中安装Hexo：<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">install:</span><br><span class="line">-<span class="ruby"> npm install hexo-cli -g</span><br><span class="line"></span>-<span class="ruby"> npm install hexo --save</span><br><span class="line"></span>-<span class="ruby"> npm install</span></span><br></pre></td></tr></table></figure></p>
<p>然后执行Hexo的渲染操作<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">script:</span><br><span class="line">-<span class="ruby"> hexo clean   /<span class="regexp">/分开写，方便调试可能出现的错误</span><br><span class="line"></span></span>-<span class="ruby"> hexo d </span><br><span class="line"></span>-<span class="ruby"> hexo g</span></span><br></pre></td></tr></table></figure></p>
<p>到这里，你的Travis CI的持续集成已经配置完毕了，最后的<code>.travis.yml</code>文件内容可以参考如下：<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">branches:</span><br><span class="line">  only:</span><br><span class="line">  -<span class="ruby"> blog</span><br><span class="line"></span></span><br><span class="line">language: node_js</span><br><span class="line"></span><br><span class="line">node_js:</span><br><span class="line">-<span class="ruby"> <span class="string">'0.10'</span></span><br><span class="line"></span></span><br><span class="line">before_install:</span><br><span class="line">-<span class="ruby"> openssl aes-<span class="number">256</span>-cbc -<span class="constant">K</span> <span class="variable">$encrypted_xxxxxxxxxx_key</span> -iv <span class="variable">$encrypted_xxxxxxxxxx_iv</span></span><br><span class="line"></span>  -<span class="ruby"><span class="keyword">in</span> travis.enc -out ~<span class="regexp">/.ssh/id</span>_rsa -d</span><br><span class="line"></span>-<span class="ruby"> chmod <span class="number">600</span> ~<span class="regexp">/.ssh/id</span>_rsa</span><br><span class="line"></span>-<span class="ruby"> eval <span class="variable">$(</span>ssh-agent)</span><br><span class="line"></span>-<span class="ruby"> ssh-add ~<span class="regexp">/.ssh/id</span>_rsa</span><br><span class="line"></span>-<span class="ruby"> cp ssh_config ~<span class="regexp">/.ssh/config</span></span><br><span class="line"></span>-<span class="ruby"> git config --global user.name <span class="string">"username"</span></span><br><span class="line"></span>-<span class="ruby"> git config --global user.email username<span class="variable">@xxxxx</span>.com</span><br><span class="line"></span></span><br><span class="line">install:</span><br><span class="line">-<span class="ruby"> npm install hexo-cli -g</span><br><span class="line"></span>-<span class="ruby"> npm install hexo --save</span><br><span class="line"></span>-<span class="ruby"> npm install</span><br><span class="line"></span></span><br><span class="line">script:</span><br><span class="line">-<span class="ruby"> hexo clean</span><br><span class="line"></span>-<span class="ruby"> hexo g</span><br><span class="line"></span>-<span class="ruby"> hexo d</span></span><br></pre></td></tr></table></figure></p>
<h1 id="更新日志">更新日志</h1><ul>
<li>2015年02月07日 首次发布，感谢Tommy351</li>
<li>2015年02月16日 跟随Hexo版本更新，修改了相关代码。</li>
<li>2015年03月22日 Hexo3.0稳定版发布，修改相关代码，并修复部分显示问题。</li>
<li>2015年04月01日 因为自己的.travis.yml有大幅度修改，所以重新添加了相关代码，避免产生困扰。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="前言">前言</h1><p>前两天了解到了一个有趣的概念叫持续集成：</p>
<blockquote>
<p>持续集成是一种软件开发实践。在持续集成中，团队成员频繁集成他们的工作成果，一般每人每天至少集成一次，也可以多次。每次集成会经过自动构建（包括自动测试）的检验，以尽快发现集成错误。许多团队发现这种方法可以显著减少集成引起的问题，并可以加快团队合作软件开发的速度。这篇文章简要介绍了持续集成的技巧和它最新的应用。<br>然后想到我的博客也恰好满足这样的需求，因为我的博客一旦有了修改，就必须要重新build并且部署，那么能不能用持续集成的思想来改造我部署博客的流程呢？</p>
</blockquote>
<p>在这样的指导思想下，我完成了上一篇文章：<a href="http://xuanwo.org/2015/02/05/VPS-Hexo-Autodeploy/">VPS搭配Github Webhook实现Hexo自动发布</a>，而今天我要介绍一下，在没有VPS的情况下，如何更方便的配置自己的持续集成的博客。</p>
<h1 id="好处">好处</h1><ul>
<li>方便：只需要一次配置，便省去了每一次编辑文档后，都需要进行<code>hexo d -g</code>的麻烦，更不必说文章增多之后渲染时间还会增长。</li>
<li>稳定：这个是最近才发现的，Github被搞了之后，很多人反映不能更新博客了，使用<code>Travis CI</code>，你只要想办法提交一个小md文档，就能进行构建。如果自己手动构建，只要一个文件上传失败，前面的工作都白费了。</li>
</ul>]]>
    
    </summary>
    
      <category term="Blog" scheme="http://xuanwo.org/tags/Blog/"/>
    
      <category term="Github-Pages" scheme="http://xuanwo.org/tags/Github-Pages/"/>
    
      <category term="Hexo" scheme="http://xuanwo.org/tags/Hexo/"/>
    
      <category term="Opinion" scheme="http://xuanwo.org/categories/Opinion/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[VPS搭配Github Webhook实现Hexo自动发布]]></title>
    <link href="http://xuanwo.org/2015/02/05/VPS-Hexo-Autodeploy/"/>
    <id>http://xuanwo.org/2015/02/05/VPS-Hexo-Autodeploy/</id>
    <published>2015-02-05T23:22:30.000Z</published>
    <updated>2015-04-03T07:22:24.000Z</updated>
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>自从买了VPS之后，我的人生就多了一个需要思考的问题——我的VPS还能用来干嘛？然后想到Github有一个Webhook的功能，可以在每一次提交之后发送一个POST到指定的URL。那么，只要找一个办法获取这个POST，再执行指定的命令，可以实现Hexo的自动发布功能了。从此以后，不管在哪里，我只要修改我的md文件，push之后我的服务器就能自动进行编译并且部署了。</p>
<a id="more"></a>
<h1 id="配置Nginx">配置Nginx</h1><h2 id="安装Nginx">安装Nginx</h2><p>使用apt-get程序来安装nginx<br><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-<span class="built_in">get</span> <span class="keyword">update</span></span><br><span class="line">apt-<span class="built_in">get</span> install nginx</span><br></pre></td></tr></table></figure></p>
<p>在浏览器中访问<a href="http://your-ip-address" target="_blank" rel="external">http://your-ip-address</a> or domain/， 如果看到<code>Welcome to nginx!</code>字样，说明Nginx已经安装成功了。</p>
<h2 id="配置Nginx-1">配置Nginx</h2><p>修改<code>/etc/nginx/sites-available/default</code>文件，在<code>serve</code>的框里面的空行中输入：<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">location</span> /update &#123;</span><br><span class="line"><span class="title">proxy_pass</span> <span class="url">http://127.0.0.1:1111</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这样设置之后<code>http://your-ip-address or domain/update</code>访问就会被重定向到1111端口。</p>
<h2 id="重启Nginx">重启Nginx</h2><p>输入：<br><code>/etc/init.d/nginx restart</code></p>
<h1 id="配置Git">配置Git</h1><h2 id="安装Git">安装Git</h2><p>输入：<br><code>apt-get install git</code></p>
<h2 id="下载自己的代码库">下载自己的代码库</h2><p>输入：<br><code>git clone yourgit yourdir</code></p>
<h1 id="配置Python">配置Python</h1><h2 id="安装Python环境">安装Python环境</h2><p>输入：<br><code>apt-get install python-pip</code><br>然后系统会自动完成相关的配置。</p>
<h2 id="编辑Python文件">编辑Python文件</h2><p>输入：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> ~/yourdir</span><br><span class="line"><span class="keyword">vi</span> hook.<span class="keyword">py</span></span><br></pre></td></tr></table></figure></p>
<p>在打开的vim界面中，点击一下<code>i</code>，进入insert模式，然后粘贴以下代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># start a python service and watch the nginx request dog</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> http.server <span class="keyword">import</span> HTTPServer,CGIHTTPRequestHandler</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread,RLock</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os.path</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">_PWD=os.path.abspath(os.path.dirname(__file__))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">execute_cmd</span><span class="params">(args,cwd=None,timeout=<span class="number">30</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> isinstance(args,str): args = [args]</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> subprocess.Popen(args,stdout=subprocess.PIPE,cwd=cwd) <span class="keyword">as</span> proc:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                output,unused_err = proc.communicate(timeout=timeout)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                proc.kill()</span><br><span class="line">                <span class="keyword">raise</span></span><br><span class="line">            retcode = proc.poll()</span><br><span class="line">            <span class="keyword">if</span> retcode:</span><br><span class="line">                <span class="keyword">raise</span> subprocess.CalledProcessError(retcode, proc.args, output=output)</span><br><span class="line">            <span class="keyword">return</span> output.decode(<span class="string">'utf-8'</span>,<span class="string">'ignore'</span>) <span class="keyword">if</span> output <span class="keyword">else</span> <span class="string">''</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> ex:</span><br><span class="line">        logging.error(<span class="string">'EXECUTE_CMD_ERROR: %s'</span>,<span class="string">' '</span>.join(str(x) <span class="keyword">for</span> x <span class="keyword">in</span> args))</span><br><span class="line">        <span class="keyword">raise</span> ex</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HttpHandler</span><span class="params">(CGIHTTPRequestHandler)</span>:</span></span><br><span class="line">    _lock = RLock()</span><br><span class="line">    _counter = <span class="number">0</span></span><br><span class="line">    _building = <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">build</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">with</span> HttpHandler._lock:</span><br><span class="line">            <span class="keyword">if</span> HttpHandler._counter == <span class="number">0</span> <span class="keyword">or</span> HttpHandler._building:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">        HttpHandler._counter = <span class="number">0</span></span><br><span class="line">        HttpHandler._building = <span class="keyword">True</span></span><br><span class="line">        logging.info(<span class="string">"BUILDING NOW..."</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            resp = execute_cmd(os.path.join(_PWD,<span class="string">'build.sh'</span>),cwd=_PWD,timeout=<span class="number">600</span>)</span><br><span class="line">            logging.info(resp)</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            HttpHandler._building = <span class="keyword">False</span></span><br><span class="line">            self.build()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_GET</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.do_POST()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_POST</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.send_response(<span class="number">200</span>,<span class="string">'OK'</span>)</span><br><span class="line">        self.end_headers()</span><br><span class="line">        self.wfile.write(<span class="string">b'OK'</span>)</span><br><span class="line">        self.wfile.flush()</span><br><span class="line">        <span class="keyword">with</span> HttpHandler._lock:</span><br><span class="line">            HttpHandler._counter += <span class="number">1</span></span><br><span class="line">        Thread(target=self.build).start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    logging.basicConfig(format=<span class="string">'%(asctime)s %(levelname)s: %(message)s'</span>,level=logging.INFO)</span><br><span class="line"></span><br><span class="line">    port = int(sys.argv[<span class="number">1</span>]) <span class="keyword">if</span> len(sys.argv) &gt; <span class="number">1</span> <span class="keyword">else</span> <span class="number">1111</span></span><br><span class="line">    logging.info(<span class="string">'starting the server at 127.0.0.1:%s'</span>,port)</span><br><span class="line">    httpd = HTTPServer((<span class="string">'127.0.0.1'</span>,port),HttpHandler)</span><br><span class="line">    httpd.serve_forever()</span><br></pre></td></tr></table></figure></p>
<p>编辑完成后，输入<code>:wq</code>退出vi。</p>
<h1 id="编辑sh文件">编辑sh文件</h1><p>切换到yourdir，然后输入：<br><code>vi build.sh</code><br>在打开的vi界面中，点击<code>i</code>进入编辑模式，然后输入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="shebang">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"build at `date`"</span></span><br><span class="line">. ~/.nvm/nvm.sh</span><br><span class="line">nvm use <span class="number">0.10</span>.<span class="number">36</span></span><br><span class="line"><span class="built_in">cd</span> ~/xuanwo</span><br><span class="line">git pull</span><br><span class="line">hexo clean</span><br><span class="line">hexo d -g</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"built successfully"</span></span><br></pre></td></tr></table></figure></p>
<p>编辑完成后，输入<code>:wq</code>退出vi。</p>
<h1 id="后台运行Python脚本进行监视">后台运行Python脚本进行监视</h1><p>运行：<br><code>nohup python3 ~/xuanwo/hook.py &gt;&gt; /tmp/hook.log 2&gt;&amp;1 &amp;</code><br><strong>每次重启VPS后，貌似都需要运行一次</strong></p>
<h1 id="更新日志">更新日志</h1><ul>
<li>2015年2月6日 首次发布</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="前言">前言</h1><p>自从买了VPS之后，我的人生就多了一个需要思考的问题——我的VPS还能用来干嘛？然后想到Github有一个Webhook的功能，可以在每一次提交之后发送一个POST到指定的URL。那么，只要找一个办法获取这个POST，再执行指定的命令，可以实现Hexo的自动发布功能了。从此以后，不管在哪里，我只要修改我的md文件，push之后我的服务器就能自动进行编译并且部署了。</p>]]>
    
    </summary>
    
      <category term="Blog" scheme="http://xuanwo.org/tags/Blog/"/>
    
      <category term="Github-Pages" scheme="http://xuanwo.org/tags/Github-Pages/"/>
    
      <category term="Hexo" scheme="http://xuanwo.org/tags/Hexo/"/>
    
      <category term="VPS" scheme="http://xuanwo.org/tags/VPS/"/>
    
      <category term="Opinion" scheme="http://xuanwo.org/categories/Opinion/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[超星学术视频下载处理一条龙]]></title>
    <link href="http://xuanwo.org/2015/01/07/chaoxing-download/"/>
    <id>http://xuanwo.org/2015/01/07/chaoxing-download/</id>
    <published>2015-01-07T01:12:07.000Z</published>
    <updated>2015-04-03T07:22:24.000Z</updated>
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>我妹纸最近开始通过看超星学术视频来<del>复习</del>预习课程了，所以我必须搞到对应课程的所有视频（不管是收费还是免费），而且我妹纸还是一个有强迫症的萌妹纸，所有的视频都必须按照顺序拍的好好的，要不然她就会不舒服。<br>根据以上描述，我需要解决以下需求：</p>
<ol>
<li>破解超星学术视频的加密链接，找到真实的下载链接。</li>
<li>重命名下载下来的视频文件。</li>
</ol>
<p>还是跟以往一样，直接把最终的解决方案放出来，要是对具体的实现感兴趣的可以接着往下面看。</p>
<a id="more"></a>
<h1 id="解决方案">解决方案</h1><p><a href="http://disk.xuanwo.org/public.php?service=files&amp;t=e0a53590668ea7605f87a056ea3db288" target="_blank" rel="external">超星学术视频下载处理一条龙</a></p>
<hr>
<h1 id="破解加密链接">破解加密链接</h1><p>用到了在某宝上面购买的超星学术视频解析下载工具。<br>双击打开，粘贴上视频页的地址，然后点一下解析，就会这样：<br><img src="http://xuanwo.qiniudn.com/work/chaoxing-intro.png" alt="解析示意"><br>然后右击选择保存视频列表，就会自动在当前目录下生成一个用课程名字命名的txt文件，一般内容如下：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">视频名称：透过性别看爱情</span><br><span class="line">作者：沈奕斐</span><br><span class="line">出处：复旦大学</span><br><span class="line"></span><br><span class="line">透过性别看爱情（一） <span class="string">http:</span><span class="comment">//video.superlib.com/a8076e683f89741b4f3b266630697ce98d21d700d106a701d45b535e52f87a888dc9b2f5485762f7</span></span><br><span class="line">透过性别看爱情（二） <span class="string">http:</span><span class="comment">//video.superlib.com/a8076e683f89741b4f3b266630697ce98d21d700d106a701d45b535e52f87a88c47ff350721a07be</span></span><br><span class="line">透过性别看爱情（三） <span class="string">http:</span><span class="comment">//video.superlib.com/a8076e683f89741b4f3b266630697ce98d21d700d106a701d45b535e52f87a8845f30d4554db33f3</span></span><br><span class="line">透过性别看爱情（四） <span class="string">http:</span><span class="comment">//video.superlib.com/a8076e683f89741b4f3b266630697ce98d21d700d106a701d45b535e52f87a88a53d9d0554a78ace</span></span><br></pre></td></tr></table></figure></p>
<h1 id="下载地址处理">下载地址处理</h1><p>软件自身的下载速度太慢，而且不支持断点续传，所以自然就想到使用旋风这样的下载工具来下载。那么问题来了，我怎么样才能把我前面得到的列表处理成可以直接创建任务的格式呢？想到了C++的freopen命令，加上字符串处理，妥妥的有木有。<br>思路比较简单，就不详细说明具体的实现了，直接上代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdlib&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstring&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cmath&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;ctime&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;algorithm&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;vector&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;deque&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;list&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;set&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;map&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stack&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;queue&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;numeric&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iomanip&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;bitset&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;sstream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;fstream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> debug "output for debug\n"</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> pi (acos(-1.0))</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> eps (1e-8)</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> ll long long int</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> MAXN 10000+10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> a[MAXN][MAXN];</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    freopen(<span class="string">"in.txt"</span>, <span class="string">"r"</span>, stdin);</span><br><span class="line">    freopen(<span class="string">"out.txt"</span>, <span class="string">"w"</span>, stdout);</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%s"</span>, a[i++]))</span><br><span class="line">    &#123;</span><br><span class="line">        ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i; j += <span class="number">2</span>) <span class="comment">//一定要考虑视频列表的空格分隔</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; a[j] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>使用这个处理之后的结果就是这样<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">http:</span><span class="comment">//video.superlib.com/a8076e683f89741b4f3b266630697ce98d21d700d106a701d45b535e52f87a888dc9b2f5485762f7</span></span><br><span class="line"><span class="string">http:</span><span class="comment">//video.superlib.com/a8076e683f89741b4f3b266630697ce98d21d700d106a701d45b535e52f87a88c47ff350721a07be</span></span><br><span class="line"><span class="string">http:</span><span class="comment">//video.superlib.com/a8076e683f89741b4f3b266630697ce98d21d700d106a701d45b535e52f87a8845f30d4554db33f3</span></span><br><span class="line"><span class="string">http:</span><span class="comment">//video.superlib.com/a8076e683f89741b4f3b266630697ce98d21d700d106a701d45b535e52f87a88a53d9d0554a78ace</span></span><br></pre></td></tr></table></figure></p>
<p>根据代码很容易就能看出来，你得自己把视频名称神马的玩意儿删掉，要不然是不能得到正确结果的= =。有空的时候再来优化一下，现在先将就着用。</p>
<h1 id="视频重命名">视频重命名</h1><p>新的问题来了，下载到的视频全都是<code>a8076e683f89741b4f3b266630697ce98d21d700d106a701d45b535e52f87a88a53d9d0554a78ace</code>这样的格式，根本就不能区别到底是什么内容。我一开始的办法是自己手动定位，手动重命名。重复了几次之后，感觉不能忍，效率太低了，我得想想办法。<br>在windows的cmd中，<code>ren a b</code>命令可以把当前目录下a文件重命名为b。然后我又知道，在cpp文件中，可以通过system()函数调用cmd中的命令。于是解决方案出来了，我只要构造出一个命令的字符串就能解决这样的问题。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdlib&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstring&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cmath&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;ctime&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;algorithm&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;vector&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;deque&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;list&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;set&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;map&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stack&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;queue&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;numeric&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iomanip&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;bitset&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;sstream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;fstream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> debug "output for debug\n"</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> pi (acos(-1.0))</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> eps (1e-8)</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> ll long long int</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> MAXN 500</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> before[MAXN], after[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    freopen(<span class="string">"in.txt"</span>, <span class="string">"r"</span>, stdin);</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%s%s"</span>, after, before))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">char</span> order[MAXN] = <span class="string">"ren "</span>;</span><br><span class="line">        <span class="keyword">int</span> lensub = <span class="built_in">strlen</span>(before + <span class="number">26</span>); <span class="comment">//用来清除http://video.superlib.com/这个前缀</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lensub; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            before[i] = before[i + <span class="number">26</span>]; <span class="comment">//得到正确的文件名</span></span><br><span class="line">        &#125;</span><br><span class="line">        before[lensub] = <span class="string">'\0'</span>;</span><br><span class="line">        <span class="built_in">strcat</span>(order, before); <span class="comment">//strcat(a,b)，将字符串b接在a的后面</span></span><br><span class="line">        <span class="keyword">int</span> len = <span class="built_in">strlen</span>(order);</span><br><span class="line">        order[len] = <span class="string">' '</span>;</span><br><span class="line">        order[len + <span class="number">1</span>] = <span class="string">'\0'</span>;</span><br><span class="line">        <span class="built_in">strcat</span>(order, after);</span><br><span class="line">        system(order);<span class="comment">//system("abc")，在cmd中执行abc命令</span></span><br><span class="line">        <span class="built_in">memset</span>(after, <span class="number">0</span>, <span class="keyword">sizeof</span>(after));</span><br><span class="line">        <span class="built_in">memset</span>(before, <span class="number">0</span>, <span class="keyword">sizeof</span>(before));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>就这样，轻松搞定了~。<br>有一个缺陷是，这样重命名出来的文件是没有后缀名的，还需要自己再处理一下。嗯哼，还是一样的，先将就着用吧，回头再来优化一下。</p>
<hr>
<h1 id="尾言">尾言</h1><p>除了下载工具，所有代码（虽然垃圾，但还是劳动成果啊= =）都是我个人的作品，转载请注明来源。</p>
<h1 id="更新日志">更新日志</h1><ul>
<li>2015年01月07日 首次更新，首个版本发布啦。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="前言">前言</h1><p>我妹纸最近开始通过看超星学术视频来<del>复习</del>预习课程了，所以我必须搞到对应课程的所有视频（不管是收费还是免费），而且我妹纸还是一个有强迫症的萌妹纸，所有的视频都必须按照顺序拍的好好的，要不然她就会不舒服。<br>根据以上描述，我需要解决以下需求：</p>
<ol>
<li>破解超星学术视频的加密链接，找到真实的下载链接。</li>
<li>重命名下载下来的视频文件。</li>
</ol>
<p>还是跟以往一样，直接把最终的解决方案放出来，要是对具体的实现感兴趣的可以接着往下面看。</p>]]>
    
    </summary>
    
      <category term="C" scheme="http://xuanwo.org/tags/C/"/>
    
      <category term="Software" scheme="http://xuanwo.org/tags/Software/"/>
    
      <category term="Opinion" scheme="http://xuanwo.org/categories/Opinion/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CF拉练第七场]]></title>
    <link href="http://xuanwo.org/2014/11/26/Contest-CUGB-CF7/"/>
    <id>http://xuanwo.org/2014/11/26/Contest-CUGB-CF7/</id>
    <published>2014-11-26T16:40:28.000Z</published>
    <updated>2015-04-03T07:22:24.000Z</updated>
    <content type="html"><![CDATA[<h1 id="比赛地址">比赛地址</h1><p><a href="http://acm.hust.edu.cn/vjudge/contest/view.action?cid=63852#overview" target="_blank" rel="external">http://acm.hust.edu.cn/vjudge/contest/view.action?cid=63852#overview</a></p>
<h1 id="比赛总结">比赛总结</h1><p>这场比赛做的很渣，第一题卡了很久，还WA了两发。第二题一个裸的最短路模板题还折腾了半天。第三题是一个比较简单的数论题，用到了GCD。然后D和E都没有敲出来，其实D是一个要用到一点技巧的裸Nim。而E题。。。正面解法思绪繁杂，没有捋出来，而从结果入手开开脑洞倒是可以有点思路= =。</p>
<h1 id="分题讲解">分题讲解</h1><h2 id="A题（暴力）">A题（暴力）</h2><p>从前后分别入手求出和，然后对应进行判断即可。<br><a href="http://xuanwo.org/2014/11/26/CF-18C/" target="_blank" rel="external">http://xuanwo.org/2014/11/26/CF-18C/</a></p>
<h2 id="B题（最短路）">B题（最短路）</h2><p>模板题，注意路径的输出。<br><a href="http://xuanwo.org/2014/11/26/CF-20C/" target="_blank" rel="external">http://xuanwo.org/2014/11/26/CF-20C/</a></p>
<h2 id="C题（数论）">C题（数论）</h2><p>用到了GCD，只要找出原来的最简比例就可以了。<br><a href="http://xuanwo.org/2014/11/26/CF-16C/" target="_blank" rel="external">http://xuanwo.org/2014/11/26/CF-16C/</a></p>
<h2 id="D题（Nim博弈）">D题（Nim博弈）</h2><p>用到了很多异或的性质，位运算果然是一门大学问。<br><a href="http://xuanwo.org/2014/11/26/CF-15C/" target="_blank" rel="external">http://xuanwo.org/2014/11/26/CF-15C/</a></p>
<h2 id="E题（DP，构造）">E题（DP，构造）</h2><p>这个题= =，还没有办法证明。<br><a href="http://xuanwo.org/2014/11/23/CF-15E/" target="_blank" rel="external">http://xuanwo.org/2014/11/23/CF-15E/</a></p>
<h1 id="更新日志">更新日志</h1><ul>
<li>2014年11月26日 完成题解。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="比赛地址">比赛地址</h1><p><a href="http://acm.hust.edu.cn/vjudge/contest/view.action?cid=63852#overview" target="_blank" rel="external">http]]>
    </summary>
    
      <category term="ACM" scheme="http://xuanwo.org/tags/ACM/"/>
    
      <category term="C" scheme="http://xuanwo.org/tags/C/"/>
    
      <category term="Contest" scheme="http://xuanwo.org/tags/Contest/"/>
    
      <category term="Exercise" scheme="http://xuanwo.org/categories/Exercise/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Codeforces Beta Round 15 C Industrial Nim]]></title>
    <link href="http://xuanwo.org/2014/11/26/CF-15C/"/>
    <id>http://xuanwo.org/2014/11/26/CF-15C/</id>
    <published>2014-11-26T14:25:00.000Z</published>
    <updated>2015-04-03T07:22:24.000Z</updated>
    <content type="html"><![CDATA[<h1 id="题目">题目</h1><p>源地址：<a href="http://codeforces.com/problemset/problem/15/C" target="_blank" rel="external">http://codeforces.com/problemset/problem/15/C</a></p>
<h1 id="理解">理解</h1><p>有n个矿场，第i个矿场有mi辆矿车，第一辆矿车有xi颗石头，第二辆xi+1颗，如此递推，直到第mi辆有mi+xi-1颗。然后有两个人轮流取石头（金矿？），他们可以选择任意一个矿场任意一辆矿车取走任意非0数量的石头，直到第一个不能再取的人认输。<br>实际上，这就是一个裸的Nim博弈问题，只要直接运用结论就能完成解答。但是问题在于，数据太多，导致每一个全都异或起来的话耗时太长。所以需要采用一些手段处理一下。我们需要用到两个结论：第一，从1异或到n的答案存在着这样一个特性：n%4==1时，答案为1；n%4==2时，答案为x+1；n%4==3时，答案为0；n%4==4时，答案为x。第二，从x异或到y的值等于nim(x-1)^nim(y)。<br>经过上述的处理，最后的结果就出来了~</p>
<a id="more"></a>
<h1 id="代码">代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdlib&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstring&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cmath&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;ctime&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;algorithm&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;vector&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;deque&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;list&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;set&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;map&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stack&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;queue&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;numeric&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iomanip&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;bitset&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;sstream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;fstream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> debug "output for debug\n"</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> pi (acos(-1.0))</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> eps (1e-8)</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> ll long long int</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> MAXN 100000+10</span></span><br><span class="line"></span><br><span class="line">ll n,x,m,ans=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">nim</span><span class="params">(ll x)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    ll tmp=x%<span class="number">4</span>;</span><br><span class="line">    <span class="keyword">if</span>(tmp==<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(tmp==<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> x+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(tmp==<span class="number">3</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%I64d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">while</span>(n--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%I64d %I64d"</span>, &amp;x, &amp;m);</span><br><span class="line">        m=nim(m+x-<span class="number">1</span>);</span><br><span class="line">        x=nim(x-<span class="number">1</span>);</span><br><span class="line">        ans^=x^m;</span><br><span class="line">    &#125;</span><br><span class="line">    ans?<span class="built_in">puts</span>(<span class="string">"tolik"</span>):<span class="built_in">puts</span>(<span class="string">"bolik"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="更新日志">更新日志</h1><ul>
<li>2014年11月26日 已AC。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="题目">题目</h1><p>源地址：<a href="http://codeforces.com/problemset/problem/15/C">http://codeforces.com/problemset/problem/15/C</a></p>
<h1 id="理解">理解</h1><p>有n个矿场，第i个矿场有mi辆矿车，第一辆矿车有xi颗石头，第二辆xi+1颗，如此递推，直到第mi辆有mi+xi-1颗。然后有两个人轮流取石头（金矿？），他们可以选择任意一个矿场任意一辆矿车取走任意非0数量的石头，直到第一个不能再取的人认输。<br>实际上，这就是一个裸的Nim博弈问题，只要直接运用结论就能完成解答。但是问题在于，数据太多，导致每一个全都异或起来的话耗时太长。所以需要采用一些手段处理一下。我们需要用到两个结论：第一，从1异或到n的答案存在着这样一个特性：n%4==1时，答案为1；n%4==2时，答案为x+1；n%4==3时，答案为0；n%4==4时，答案为x。第二，从x异或到y的值等于nim(x-1)^nim(y)。<br>经过上述的处理，最后的结果就出来了~</p>]]>
    
    </summary>
    
      <category term="ACM" scheme="http://xuanwo.org/tags/ACM/"/>
    
      <category term="C" scheme="http://xuanwo.org/tags/C/"/>
    
      <category term="Codeforces" scheme="http://xuanwo.org/tags/Codeforces/"/>
    
      <category term="博弈" scheme="http://xuanwo.org/tags/%E5%8D%9A%E5%BC%88/"/>
    
      <category term="Exercise" scheme="http://xuanwo.org/categories/Exercise/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Codeforces Beta Round 16 C Monitor (Div. 2 Only)]]></title>
    <link href="http://xuanwo.org/2014/11/26/CF-16C/"/>
    <id>http://xuanwo.org/2014/11/26/CF-16C/</id>
    <published>2014-11-26T14:04:11.000Z</published>
    <updated>2015-04-03T07:22:24.000Z</updated>
    <content type="html"><![CDATA[<h1 id="题目">题目</h1><p>源地址：<a href="http://codeforces.com/problemset/problem/16/C" target="_blank" rel="external">http://codeforces.com/problemset/problem/16/C</a></p>
<h1 id="理解">理解</h1><p>一道关于分辨率转化的问题。要求将一个大分辨率按照指定的宽高比进行转化，如果宽高比不符，则进行切割。首先，我们来求一个x和y的最大公约数d，然后分别令x=x/d，y=y/d，这样就得到了x和y之间最简的比例形式。然后a和b分别去除以x和y，得到的两个背书中去掉小数部分较小的那个，就是切割之后的倍数比。最后得到的结果就是符合要求的结果。</p>
<a id="more"></a>
<h1 id="代码">代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdlib&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstring&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cmath&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;ctime&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;algorithm&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;vector&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;deque&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;list&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;set&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;map&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stack&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;queue&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;numeric&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iomanip&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;bitset&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;sstream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;fstream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> debug "output for debug\n"</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> pi (acos(-1.0))</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> eps (1e-8)</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> ll long long int</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line">ll a,b,x,y;</span><br><span class="line">ll d,t1,t2;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%I64d%I64d%I64d%I64d"</span>, &amp;a, &amp;b, &amp;x, &amp;y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">gcd</span><span class="params">(ll a, ll b)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b ? gcd(b, a%b) : a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    init();</span><br><span class="line">    d = gcd(x, y);</span><br><span class="line">    x = x / d, y = y / d;</span><br><span class="line">    t1 = a / x;</span><br><span class="line">    t2 = b / y;</span><br><span class="line">    t1 = min(t1, t2);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;x*t1&lt;&lt;<span class="string">" "</span>&lt;&lt;y*t1&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="更新日志">更新日志</h1><ul>
<li>2014年11月26日 已AC。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="题目">题目</h1><p>源地址：<a href="http://codeforces.com/problemset/problem/16/C">http://codeforces.com/problemset/problem/16/C</a></p>
<h1 id="理解">理解</h1><p>一道关于分辨率转化的问题。要求将一个大分辨率按照指定的宽高比进行转化，如果宽高比不符，则进行切割。首先，我们来求一个x和y的最大公约数d，然后分别令x=x/d，y=y/d，这样就得到了x和y之间最简的比例形式。然后a和b分别去除以x和y，得到的两个背书中去掉小数部分较小的那个，就是切割之后的倍数比。最后得到的结果就是符合要求的结果。</p>]]>
    
    </summary>
    
      <category term="ACM" scheme="http://xuanwo.org/tags/ACM/"/>
    
      <category term="C" scheme="http://xuanwo.org/tags/C/"/>
    
      <category term="Codeforces" scheme="http://xuanwo.org/tags/Codeforces/"/>
    
      <category term="数论" scheme="http://xuanwo.org/tags/%E6%95%B0%E8%AE%BA/"/>
    
      <category term="Exercise" scheme="http://xuanwo.org/categories/Exercise/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Codeforces Alpha Round 20 C Dijkstra? (Codeforces format)]]></title>
    <link href="http://xuanwo.org/2014/11/26/CF-20C/"/>
    <id>http://xuanwo.org/2014/11/26/CF-20C/</id>
    <published>2014-11-26T13:59:18.000Z</published>
    <updated>2015-04-03T07:22:24.000Z</updated>
    <content type="html"><![CDATA[<h1 id="题目">题目</h1><p>源地址：<a href="http://codeforces.com/problemset/problem/20/C" target="_blank" rel="external">http://codeforces.com/problemset/problem/20/C</a></p>
<h1 id="理解">理解</h1><p>实际上题目不难，但是我们都捣鼓了很久。原因是我们根本就没有掌握这种算法，导致连一个输出路径都搞得这么蛋疼。使用邻接表来存储每一个节点，每一个节点都自带一个指针指向下一个节点（可以自己使用数组模拟），最后的结果倒过来输出即可。</p>
<a id="more"></a>
<h1 id="代码">代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdlib&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstring&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cmath&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;ctime&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;algorithm&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;vector&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;deque&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;list&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;set&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;map&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stack&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;queue&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;numeric&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iomanip&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;bitset&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;sstream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;fstream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> debug "output for debug\n"</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> pi (acos(-1.0))</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> eps (1e-8)</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> ll long long int</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> MAXN 100000*4+10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ll maxd = <span class="number">1E13</span>;</span><br><span class="line"><span class="keyword">int</span> v[MAXN],w[MAXN],next[MAXN],pre[MAXN],res[MAXN];</span><br><span class="line"><span class="keyword">int</span> first[MAXN],inq[MAXN],e;</span><br><span class="line">ll d[MAXN];</span><br><span class="line"><span class="keyword">int</span> m,n;</span><br><span class="line"><span class="keyword">int</span> x,y,z;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addeage</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    v[e]=y;</span><br><span class="line">    w[e]=z;</span><br><span class="line">    next[e]=first[x];</span><br><span class="line">    first[x]=e;</span><br><span class="line">    e++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">spfa</span><span class="params">(<span class="keyword">int</span> s)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>; i&lt;MAXN; i++)</span><br><span class="line">        d[i]=maxd;</span><br><span class="line">    d[s]=<span class="number">0</span>;</span><br><span class="line">    inq[s]=<span class="number">1</span>;</span><br><span class="line">    q.push(s);</span><br><span class="line">    <span class="keyword">while</span>(q.empty()==<span class="keyword">false</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        inq[u]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =first[u]; i!=-<span class="number">1</span>; i=next[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(d[v[i]]&gt;d[u]+w[i])</span><br><span class="line">            &#123;</span><br><span class="line">                d[v[i]]=(d[u]+w[i]);</span><br><span class="line">                pre[v[i]]=u;</span><br><span class="line">                <span class="keyword">if</span>(inq[v[i]]==<span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    q.push(v[i]);</span><br><span class="line">                    inq[v[i]]=<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;MAXN; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        first[i]=-<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    e=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;m,&amp;n);</span><br><span class="line">    <span class="keyword">while</span>(n--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line">        addeage(x,y,z);</span><br><span class="line">        addeage(y,x,z);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    init();</span><br><span class="line">    spfa(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(d[m]==maxd)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"-1"</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> now=m;</span><br><span class="line">        <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(now!=<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            res[cnt++] = now;</span><br><span class="line">            now = pre[now];</span><br><span class="line">        &#125;</span><br><span class="line">        res[cnt++] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = cnt-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>,res[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="更新日志">更新日志</h1><ul>
<li>2014年11月26日 已AC。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="题目">题目</h1><p>源地址：<a href="http://codeforces.com/problemset/problem/20/C">http://codeforces.com/problemset/problem/20/C</a></p>
<h1 id="理解">理解</h1><p>实际上题目不难，但是我们都捣鼓了很久。原因是我们根本就没有掌握这种算法，导致连一个输出路径都搞得这么蛋疼。使用邻接表来存储每一个节点，每一个节点都自带一个指针指向下一个节点（可以自己使用数组模拟），最后的结果倒过来输出即可。</p>]]>
    
    </summary>
    
      <category term="ACM" scheme="http://xuanwo.org/tags/ACM/"/>
    
      <category term="C" scheme="http://xuanwo.org/tags/C/"/>
    
      <category term="Codeforces" scheme="http://xuanwo.org/tags/Codeforces/"/>
    
      <category term="SPFA" scheme="http://xuanwo.org/tags/SPFA/"/>
    
      <category term="Exercise" scheme="http://xuanwo.org/categories/Exercise/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Codeforces Beta Round 18 C Stripe (Div.2 Only)]]></title>
    <link href="http://xuanwo.org/2014/11/26/CF-18C/"/>
    <id>http://xuanwo.org/2014/11/26/CF-18C/</id>
    <published>2014-11-26T13:16:29.000Z</published>
    <updated>2015-04-03T07:22:24.000Z</updated>
    <content type="html"><![CDATA[<h1 id="题目">题目</h1><p>源地址：<a href="http://codeforces.com/problemset/problem/18/C" target="_blank" rel="external">http://codeforces.com/problemset/problem/18/C</a></p>
<h1 id="理解">理解</h1><p>题意很简单，把一个给定的数列分成两份，要求两份数字之和相等。直接暴力乱搞，预处理的时候用两个数组分别保存前后缀的数字之和，然后只要遍历一遍，就能得到最后的结果。</p>
<a id="more"></a>
<h1 id="代码">代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdlib&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstring&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cmath&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;ctime&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;algorithm&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;vector&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;deque&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;list&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;set&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;map&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stack&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;queue&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;numeric&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iomanip&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;bitset&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;sstream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;fstream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> debug "output for debug\n"</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> pi (acos(-1.0))</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> eps (1e-8)</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> ll long long int</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> MAXN 100000+10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[MAXN];</span><br><span class="line"><span class="keyword">int</span> b[MAXN];</span><br><span class="line"><span class="keyword">int</span> c[MAXN];</span><br><span class="line"><span class="keyword">int</span> n,ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    b[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">        b[i]=b[i-<span class="number">1</span>]+a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=n; j&gt;=<span class="number">1</span>; j--)</span><br><span class="line">    &#123;</span><br><span class="line">        c[j]=c[j+<span class="number">1</span>]+a[j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(b[i]==c[i+<span class="number">1</span>])</span><br><span class="line">            ans++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="更新日志">更新日志</h1><ul>
<li>2014年11月26日 已AC。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="题目">题目</h1><p>源地址：<a href="http://codeforces.com/problemset/problem/18/C">http://codeforces.com/problemset/problem/18/C</a></p>
<h1 id="理解">理解</h1><p>题意很简单，把一个给定的数列分成两份，要求两份数字之和相等。直接暴力乱搞，预处理的时候用两个数组分别保存前后缀的数字之和，然后只要遍历一遍，就能得到最后的结果。</p>]]>
    
    </summary>
    
      <category term="ACM" scheme="http://xuanwo.org/tags/ACM/"/>
    
      <category term="C" scheme="http://xuanwo.org/tags/C/"/>
    
      <category term="Codeforces" scheme="http://xuanwo.org/tags/Codeforces/"/>
    
      <category term="暴力" scheme="http://xuanwo.org/tags/%E6%9A%B4%E5%8A%9B/"/>
    
      <category term="Exercise" scheme="http://xuanwo.org/categories/Exercise/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[UVa 272 TEX Quotes]]></title>
    <link href="http://xuanwo.org/2014/11/25/UVa-272-TEX-Quotes/"/>
    <id>http://xuanwo.org/2014/11/25/UVa-272-TEX-Quotes/</id>
    <published>2014-11-25T10:40:48.000Z</published>
    <updated>2015-04-03T07:22:24.000Z</updated>
    <content type="html"><![CDATA[<h1 id="题目">题目</h1><p>源地址：<a href="http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;category=829&amp;page=show_problem&amp;problem=208" target="_blank" rel="external">http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;category=829&amp;page=show_problem&amp;problem=208</a></p>
<h1 id="理解">理解</h1><p>同样的，题目很简单。只需要考虑当前处理的是前面的还是后面的那个引号。</p>
<a id="more"></a>
<h1 id="代码">代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdlib&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstring&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cmath&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;ctime&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;algorithm&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;vector&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;deque&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;list&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;set&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;map&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stack&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;queue&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;numeric&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iomanip&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;bitset&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;sstream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;fstream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> debug "output for debug\n"</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> pi (acos(-1.0))</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> eps (1e-8)</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> ll long long int</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> a;</span><br><span class="line"><span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%c"</span>, &amp;a))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a==<span class="string">'"'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            flag++;</span><br><span class="line">            <span class="keyword">if</span>(flag%<span class="number">2</span>==<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%s"</span>, <span class="string">"``"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%s"</span>, <span class="string">"''"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%c"</span>, a);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="更新日志">更新日志</h1><ul>
<li>2014年11月25日 已AC。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="题目">题目</h1><p>源地址：<a href="http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;category=829&amp;page=show_problem&amp;problem=208">http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;category=829&amp;page=show_problem&amp;problem=208</a></p>
<h1 id="理解">理解</h1><p>同样的，题目很简单。只需要考虑当前处理的是前面的还是后面的那个引号。</p>]]>
    
    </summary>
    
      <category term="ACM" scheme="http://xuanwo.org/tags/ACM/"/>
    
      <category term="C" scheme="http://xuanwo.org/tags/C/"/>
    
      <category term="UVa" scheme="http://xuanwo.org/tags/UVa/"/>
    
      <category term="字符串" scheme="http://xuanwo.org/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="Exercise" scheme="http://xuanwo.org/categories/Exercise/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[UVa 10082 WERTYU]]></title>
    <link href="http://xuanwo.org/2014/11/25/UVa-10082-WERTYU/"/>
    <id>http://xuanwo.org/2014/11/25/UVa-10082-WERTYU/</id>
    <published>2014-11-25T10:34:01.000Z</published>
    <updated>2015-04-03T07:22:24.000Z</updated>
    <content type="html"><![CDATA[<h1 id="题目">题目</h1><p>源地址：<a href="http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;category=829&amp;page=show_problem&amp;problem=1023" target="_blank" rel="external">http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;category=829&amp;page=show_problem&amp;problem=1023</a></p>
<h1 id="理解">理解</h1><p>很简单的一道题，不过想了很久。我觉得需要注意的地方大概有三处：</p>
<ul>
<li>不用自己手写所有情况的判断，使用一个字符串数组可以高效地解决问题。</li>
<li>可以采用一边读入一边处理的方法，不需要开一个数组来保存所有的数，更何况那样做还要处理空格和回车的问题。</li>
<li>读题的时候忽略了两处地方，多行以及没有<code>QAZ</code>这些字符，导致最后处理的时候出现了问题。<br>注意到这些，这道题就可以轻松A了。</li>
</ul>
<a id="more"></a>
<h1 id="代码">代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdlib&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstring&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cmath&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;ctime&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;algorithm&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;vector&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;deque&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;list&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;set&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;map&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stack&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;queue&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;numeric&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iomanip&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;bitset&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;sstream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;fstream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> debug "output for debug\n"</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> pi (acos(-1.0))</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> eps (1e-8)</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> ll long long int</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> MAXN 50</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> a[MAXN]=<span class="string">"`1234567890-=QWERTYUIOP[]\\ASDFGHJKL;'ZXCVBNM,./"</span>;</span><br><span class="line"><span class="keyword">char</span> b;</span><br><span class="line"><span class="keyword">int</span> len=<span class="built_in">strlen</span>(a);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%c"</span>, &amp;b))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(b==<span class="string">' '</span>)  <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(b==<span class="string">'\n'</span>) <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(b==a[i]) <span class="built_in">printf</span>(<span class="string">"%c"</span>, a[i-<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="更新日志">更新日志</h1><ul>
<li>2014年11月25日 已AC。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="题目">题目</h1><p>源地址：<a href="http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;category=829&amp;page=show_problem&amp;problem=1023">http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;category=829&amp;page=show_problem&amp;problem=1023</a></p>
<h1 id="理解">理解</h1><p>很简单的一道题，不过想了很久。我觉得需要注意的地方大概有三处：</p>
<ul>
<li>不用自己手写所有情况的判断，使用一个字符串数组可以高效地解决问题。</li>
<li>可以采用一边读入一边处理的方法，不需要开一个数组来保存所有的数，更何况那样做还要处理空格和回车的问题。</li>
<li>读题的时候忽略了两处地方，多行以及没有<code>QAZ</code>这些字符，导致最后处理的时候出现了问题。<br>注意到这些，这道题就可以轻松A了。</li>
</ul>]]>
    
    </summary>
    
      <category term="ACM" scheme="http://xuanwo.org/tags/ACM/"/>
    
      <category term="C" scheme="http://xuanwo.org/tags/C/"/>
    
      <category term="UVa" scheme="http://xuanwo.org/tags/UVa/"/>
    
      <category term="字符串" scheme="http://xuanwo.org/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="Exercise" scheme="http://xuanwo.org/categories/Exercise/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Codeforces Beta Round 15 E Triangles]]></title>
    <link href="http://xuanwo.org/2014/11/23/CF-15E/"/>
    <id>http://xuanwo.org/2014/11/23/CF-15E/</id>
    <published>2014-11-23T13:50:17.000Z</published>
    <updated>2015-04-03T07:22:24.000Z</updated>
    <content type="html"><![CDATA[<h1 id="题目">题目</h1><p>源地址：<a href="http://codeforces.com/contest/15/problem/E" target="_blank" rel="external">http://codeforces.com/contest/15/problem/E</a></p>
<h1 id="理解">理解</h1><p>数学渣，这道题无从下手= =。为了方便能自己看出一些东西来，我打了前两项的表去CF提交，幸运地得到了n=6的解，结果是1354。这个结果印证了昨晚比赛时候我的一些想法，因为<code>10=(2^2+1)*2</code>，<code>74=(6^2+1)*2</code>，<code>1354=(26^2+1)*2</code>。也就是说，最后的结果一定是某一个数的平方加上一再乘二的结果。这样，这个问题就转化成了，如何找到那个数。我们可以看到，这个数组成的数列是<code>2 6 26</code>。考虑到最后的取模，这个数一定是指数级别的，要不然增长速度太慢了，作为一个未来的码农，想到的第一个数列就是2 4 8。乍一看感觉跟<code>2 6 26</code>扯不上关系，不过再观察一下，<code>2 6 26</code>向前递减之后可以得到另外一个衍生数列，也就是<code>2 4 20</code>。第一个反应就是<code>20=4*5</code>，但是对不上啊，4怎么处理？小脑一动，对啊，4=4*1。1和5跟原数列有什么关系呢？可以看到，<code>1=4-3</code>，<code>5=8-3</code>。<br>写到这里，脑子里面已经是一团浆糊了，我来列成表格梳理一下。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">a</span>  c  <span class="tag">b</span></span><br><span class="line"><span class="number">2</span>  <span class="number">4</span>  <span class="number">2</span></span><br><span class="line"><span class="number">4</span>  <span class="number">4</span>  <span class="number">6</span></span><br><span class="line"><span class="number">8</span>  <span class="number">20</span> <span class="number">26</span></span><br></pre></td></tr></table></figure></p>
<p>这样可以看出，a=pow(2,i)，c就等于c*(a-3)，明显，b=b+c。于是我就得到了最后的公式。<br>以上，是通过偷鸡往后再推了一项得到的题解，在实际的比赛中，一方面题目不会再给你下一项（CF倒是可以用这种方法骗答案），另一方面，真的比赛中思路也不会这么清晰。所以还是要学习正规的组合数学+DP的做法，在我学会之前，还是先挖一个坑吧= =。</p>
<a id="more"></a>
<h1 id="新技能get">新技能get</h1><h1 id="代码">代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdlib&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstring&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cmath&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;ctime&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;algorithm&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;vector&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;deque&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;list&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;set&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;map&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stack&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;queue&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;numeric&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iomanip&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;bitset&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;sstream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;fstream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> debug "output for debug\n"</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> pi (acos(-1.0))</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> eps (1e-8)</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> ll long long int</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> mod 1000000009</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line">ll a=<span class="number">2</span>,b=<span class="number">2</span>,c=<span class="number">4</span>,n;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%I64d"</span>,&amp;n);</span><br><span class="line">    a=<span class="number">2</span>,b=<span class="number">2</span>,c=<span class="number">4</span>;</span><br><span class="line">    <span class="keyword">while</span>(n-=<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        a=a*<span class="number">2</span>%mod,c=c*(a-<span class="number">3</span>)%mod,b=(b+c)%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>,(b*b+<span class="number">1</span>)*<span class="number">2</span>%mod);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="更新日志">更新日志</h1><ul>
<li>2014年11月23日 已AC。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="题目">题目</h1><p>源地址：<a href="http://codeforces.com/contest/15/problem/E">http://codeforces.com/contest/15/problem/E</a></p>
<h1 id="理解">理解</h1><p>数学渣，这道题无从下手= =。为了方便能自己看出一些东西来，我打了前两项的表去CF提交，幸运地得到了n=6的解，结果是1354。这个结果印证了昨晚比赛时候我的一些想法，因为<code>10=(2^2+1)*2</code>，<code>74=(6^2+1)*2</code>，<code>1354=(26^2+1)*2</code>。也就是说，最后的结果一定是某一个数的平方加上一再乘二的结果。这样，这个问题就转化成了，如何找到那个数。我们可以看到，这个数组成的数列是<code>2 6 26</code>。考虑到最后的取模，这个数一定是指数级别的，要不然增长速度太慢了，作为一个未来的码农，想到的第一个数列就是2 4 8。乍一看感觉跟<code>2 6 26</code>扯不上关系，不过再观察一下，<code>2 6 26</code>向前递减之后可以得到另外一个衍生数列，也就是<code>2 4 20</code>。第一个反应就是<code>20=4*5</code>，但是对不上啊，4怎么处理？小脑一动，对啊，4=4*1。1和5跟原数列有什么关系呢？可以看到，<code>1=4-3</code>，<code>5=8-3</code>。<br>写到这里，脑子里面已经是一团浆糊了，我来列成表格梳理一下。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">a</span>  c  <span class="tag">b</span></span><br><span class="line"><span class="number">2</span>  <span class="number">4</span>  <span class="number">2</span></span><br><span class="line"><span class="number">4</span>  <span class="number">4</span>  <span class="number">6</span></span><br><span class="line"><span class="number">8</span>  <span class="number">20</span> <span class="number">26</span></span><br></pre></td></tr></table></figure></p>
<p>这样可以看出，a=pow(2,i)，c就等于c*(a-3)，明显，b=b+c。于是我就得到了最后的公式。<br>以上，是通过偷鸡往后再推了一项得到的题解，在实际的比赛中，一方面题目不会再给你下一项（CF倒是可以用这种方法骗答案），另一方面，真的比赛中思路也不会这么清晰。所以还是要学习正规的组合数学+DP的做法，在我学会之前，还是先挖一个坑吧= =。</p>]]>
    
    </summary>
    
      <category term="ACM" scheme="http://xuanwo.org/tags/ACM/"/>
    
      <category term="C" scheme="http://xuanwo.org/tags/C/"/>
    
      <category term="Codeforces" scheme="http://xuanwo.org/tags/Codeforces/"/>
    
      <category term="DP" scheme="http://xuanwo.org/tags/DP/"/>
    
      <category term="组合数学" scheme="http://xuanwo.org/tags/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/"/>
    
      <category term="Exercise" scheme="http://xuanwo.org/categories/Exercise/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Codeforces Beta Round 6 B President's Office (Div.2 Only)]]></title>
    <link href="http://xuanwo.org/2014/11/22/CF-6B/"/>
    <id>http://xuanwo.org/2014/11/22/CF-6B/</id>
    <published>2014-11-22T17:59:29.000Z</published>
    <updated>2015-04-03T07:22:24.000Z</updated>
    <content type="html"><![CDATA[<h1 id="题目">题目</h1><p>源地址：<a href="http://codeforces.com/problemset/problem/6/B" target="_blank" rel="external">http://codeforces.com/problemset/problem/6/B</a></p>
<h1 id="理解">理解</h1><p>总统的办公室里面坐着他的副手，然后每个人都会有一张办公桌（长短不一，但每个人都有自己的颜色）。然后告诉你每个人的办公桌都是长方形，给定一个描述办公室布局的图，要你求出这个办公室里面总统的副手有几个。<br>一开始我想得太多，觉得应该用DFS来暴力搜索，只要判断总统办公桌的四周即可。后来发现这种方法是不可行，决定采用STL里面的pair+set来做。思路很简单，既然已经告诉我办公桌都是长方形的，那么，我只要找到总统办公桌所占的区域，然后直接遍历这块区域外围的一圈即可。</p>
<a id="more"></a>
<h1 id="代码">代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdlib&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstring&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cmath&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;ctime&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;algorithm&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;vector&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;deque&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;list&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;set&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;map&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stack&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;queue&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;numeric&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iomanip&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;bitset&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;sstream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;fstream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> debug "output for debug\n"</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> pi (acos(-1.0))</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> eps (1e-8)</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> ll long long int</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> MAXN 100+10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> c,road[MAXN][MAXN];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line">pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; lt(-<span class="number">1</span>,-<span class="number">1</span>);</span><br><span class="line">    pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; rb(-<span class="number">1</span>,-<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="keyword">char</span>&gt; ans;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span><br><span class="line"> </span>&#123;</span><br><span class="line">     <span class="built_in">scanf</span>(<span class="string">"%d %d %c"</span>, &amp;n,&amp;m,&amp;c);</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">     &#123;</span><br><span class="line">         <span class="built_in">scanf</span>(<span class="string">"%s"</span>, road[i]);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    init();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(road[i][j]==c)</span><br><span class="line">            &#123;</span><br><span class="line">                rb=pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;(i,j);</span><br><span class="line">                <span class="keyword">if</span>(lt.first&lt;<span class="number">0</span>)  lt=pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;(i,j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=lt.first;i&lt;=rb.first;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=lt.second;j&lt;=rb.second;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;<span class="number">0</span>&amp;&amp;road[i-<span class="number">1</span>][j]!=c&amp;&amp;road[i-<span class="number">1</span>][j]!=<span class="string">'.'</span>) ans.insert(road[i-<span class="number">1</span>][j]);</span><br><span class="line">            <span class="keyword">if</span>(i&lt;n-<span class="number">1</span>&amp;&amp;road[i+<span class="number">1</span>][j]!=c&amp;&amp;road[i+<span class="number">1</span>][j]!=<span class="string">'.'</span>)   ans.insert(road[i+<span class="number">1</span>][j]);</span><br><span class="line">            <span class="keyword">if</span>(j&gt;<span class="number">0</span>&amp;&amp;road[i][j-<span class="number">1</span>]!=c&amp;&amp;road[i][j-<span class="number">1</span>]!=<span class="string">'.'</span>) ans.insert(road[i][j-<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">if</span>(j&lt;m-<span class="number">1</span>&amp;&amp;road[i][j+<span class="number">1</span>]!=c&amp;&amp;road[i][j+<span class="number">1</span>]!=<span class="string">'.'</span>)   ans.insert(road[i][j+<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, ans.size());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="更新日志">更新日志</h1><ul>
<li>2014年11月22日 已AC。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="题目">题目</h1><p>源地址：<a href="http://codeforces.com/problemset/problem/6/B">http://codeforces.com/problemset/problem/6/B</a></p>
<h1 id="理解">理解</h1><p>总统的办公室里面坐着他的副手，然后每个人都会有一张办公桌（长短不一，但每个人都有自己的颜色）。然后告诉你每个人的办公桌都是长方形，给定一个描述办公室布局的图，要你求出这个办公室里面总统的副手有几个。<br>一开始我想得太多，觉得应该用DFS来暴力搜索，只要判断总统办公桌的四周即可。后来发现这种方法是不可行，决定采用STL里面的pair+set来做。思路很简单，既然已经告诉我办公桌都是长方形的，那么，我只要找到总统办公桌所占的区域，然后直接遍历这块区域外围的一圈即可。</p>]]>
    
    </summary>
    
      <category term="ACM" scheme="http://xuanwo.org/tags/ACM/"/>
    
      <category term="C" scheme="http://xuanwo.org/tags/C/"/>
    
      <category term="Codeforces" scheme="http://xuanwo.org/tags/Codeforces/"/>
    
      <category term="暴力" scheme="http://xuanwo.org/tags/%E6%9A%B4%E5%8A%9B/"/>
    
      <category term="Exercise" scheme="http://xuanwo.org/categories/Exercise/"/>
    
  </entry>
  
</feed>